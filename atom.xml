<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Doublemine</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://notes.wanghao.work/"/>
  <updated>2017-09-02T16:13:16.000Z</updated>
  <id>https://notes.wanghao.work/</id>
  
  <author>
    <name>夏末</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker非Root运行</title>
    <link href="https://notes.wanghao.work/2017-07-11-Docker%E9%9D%9ERoot%E7%94%A8%E6%88%B7%E8%BF%90%E8%A1%8C.html"/>
    <id>https://notes.wanghao.work/2017-07-11-Docker非Root用户运行.html</id>
    <published>2017-07-11T02:56:01.000Z</published>
    <updated>2017-09-02T16:13:16.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>Docker Engine的Deamon进程是以root权限运行的，如果是普通用户要与之交互，需要使用<code>sudo</code>命令来提权与之交互。之前使用Docker官方的安装脚本安装完成之后，会给出一个提示将当前非root用户添加到doker组之中，以避免每次都需要输入<code>sudo</code>的麻烦。</p>
</div>
<p>然而随着Docker版本的迭代和官网的安装方式的更改，现在官方给出的安装方式是添加仓库源地址，然后使用默认的<code>apt</code>或者<code>yum</code>包管理工具来完成后安装。并不再提示用户添加非root用户到组。</p>
<p>默认情况下，完成Docker Engine的安装之后，Docker将会自动创建一个名为<code>docker</code>的用户组，所以<code>root</code>用户和在<code>docker</code>组中的用户都可以免去<code>sudo</code>来与Docker Engine交互。知道原理之后就简单了：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo usermod -aG docker $&#123;whoami&#125; #添加当前用户到docker组</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;Docker Engine的Deamon进程是以root权限运行的，如果是普通用户要与之交互，需要使用&lt;code&gt;sudo&lt;/code&gt;命令来提权与之交互。之前使用Docker官方的安装脚本安装完成之后，会给出一个提示将当前非r
    
    </summary>
    
    
      <category term="Docker" scheme="https://notes.wanghao.work/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot使用SpringFox自动生成Api Doc</title>
    <link href="https://notes.wanghao.work/2017-06-30-Spring-Boot%E4%BD%BF%E7%94%A8Swagger%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90Api-Doc.html"/>
    <id>https://notes.wanghao.work/2017-06-30-Spring-Boot使用Swagger自动生成Api-Doc.html</id>
    <published>2017-06-30T02:56:01.000Z</published>
    <updated>2017-09-02T16:13:01.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>在做Android开发的时候，对于Api接口的对接有着深刻的体会：后端通过Markdown或者Word写好Api文档，然后通过类似Samba或者Dropbox这样的服务与移动端实现文档共享。有的时候因为接口出了问题，中间还得来回修改对接，效率低下不说，要是后端手抖写错参数而没有意识到，移动端埋头一顿调试。。。说多了都是泪。</p>
</div>
<p>为了避免同时维护代码和文档来保持两者之间的同步而带来的额外负担，同事推荐了<a href="http://apidocjs.com/" target="_blank" rel="external"><code>ApiDoc</code></a>来生成文档，虽然生成的文档界面比较清爽然而前提是必须得按照规定的语法写上详细的注释，才能生成对应的文档，虽然写注释本身是一件好事，不过有能够自动生成的方法为啥不使用呢?</p>
<a id="more"></a>
<hr>
<p>与<code>Apidoc</code>类似，<code>Swagger</code>也是一个用来文档化Resetful Api的项目，不过开源社区的支持应该是所有类似项目中最为完善的，因此除了可以使用<a href="https://github.com/swagger-api/swagger-editor" target="_blank" rel="external">Swagger Editor</a>来编写Api文档之外，你还可以使用其它对应的自动化生成工具，以此来避免同时维护文档和代码的麻烦：</p>
<ul>
<li><a href="https://github.com/springfox/springfox" target="_blank" rel="external">Springfox</a> 是为Spring而打造的自动化生成接口文档的其中一个Java实现</li>
<li><a href="https://github.com/marcgibbons/django-rest-swagger" target="_blank" rel="external">Django Reset Swagger</a> 则是为Django而打造的Python实现。</li>
</ul>
<p>这篇文章将从头创建一个Spring Boot项目并使用Springfox来生成对应的接口文档，来说明使用Springfox是多么的简单。首先创建Spring Boot项目：</p>
<h3 id="创建Spring-Boot项目"><a href="#创建Spring-Boot项目" class="headerlink" title="创建Spring Boot项目"></a>创建Spring Boot项目</h3><h4 id="Eclipse"><a href="#Eclipse" class="headerlink" title="Eclipse"></a>Eclipse</h4><p>如果你是使用Eclipse的话，那么：</p>
<p><img src="https://camo.githubusercontent.com/8caa3693b4268c095c001089313d687f647d551a/687474703a2f2f696d67322e77696b69612e6e6f636f6f6b69652e6e65742f5f5f636232303133303831393134323932382f6361726466696768742f696d616765732f7468756d622f352f35352f476f2d686f6d652d796f7572652d6472756e6b2e6a70672f35303070782d476f2d686f6d652d796f7572652d6472756e6b2e6a7067" alt=""></p>
<h4 id="IntelliJ-IDEA"><a href="#IntelliJ-IDEA" class="headerlink" title="IntelliJ IDEA"></a>IntelliJ IDEA</h4><p>我们使用IDEA的<code>Spring initializr</code>向导来简化初始化创建项目，如图所示：</p>
<p><img src="https://ws1.sinaimg.cn/large/694830ebgy1fh3qqzjjr9j21gu0w4td1.jpg" alt=""></p>
<p>点击下一步根据个人的喜好来配置喜欢的JVM语言和构建工具，此处我选择<code>Kotlin</code>和<code>Gradle</code>，一切都是为了爽：</p>
<p><img src="https://ws1.sinaimg.cn/large/694830ebgy1fh3qv1abohj21gu0w4jum.jpg" alt=""></p>
<p>点击下一步选择需要集成的依赖项，此处我们简单演示下Resetful Api文档生成，所以选择Web即可，如图：</p>
<p><img src="https://ws1.sinaimg.cn/large/694830ebgy1fh45g74sdaj21gu0w4agg.jpg" alt=""></p>
<p>点击Next直至完成。这样，我们就完成了Spring Boot项目的创建了。</p>
<hr>
<h3 id="添加Springfox依赖"><a href="#添加Springfox依赖" class="headerlink" title="添加Springfox依赖"></a>添加Springfox依赖</h3><p>编辑根目录下的<code>build.gradle</code>文件，修改以下内容：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    .... <span class="comment">/*some depends...*/</span></div><div class="line">    compile <span class="string">"io.springfox:springfox-swagger2:$springfoxVersion"</span></div><div class="line">    compile <span class="string">"io.springfox:springfox-swagger-ui:$springfoxVersion"</span></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">ext &#123;</div><div class="line">    springfoxVersion = <span class="string">'2.7.0'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="配置Springfox"><a href="#配置Springfox" class="headerlink" title="配置Springfox"></a>配置Springfox</h3><p>Springfox通过<code>Docket</code>对象来定义生成的Api的一些属性，因此我们来创建一个Configure类来专门做Springfox的配置。创建一个<code>Swagger2Configure.kt</code>文件，并添加以下内容：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableSwagger2</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Swagger2Configure</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span> <span class="function"><span class="keyword">fun</span> <span class="title">petApi</span><span class="params">()</span></span>: Docket &#123;</div><div class="line">        <span class="keyword">return</span> Docket(DocumentationType.SWAGGER_2)</div><div class="line">                .apiInfo(generateApiInfo()) <span class="comment">/*定制swagger ui显示的版本信息*/</span></div><div class="line">                .useDefaultResponseMessages(<span class="literal">false</span>)</div><div class="line">                .select()</div><div class="line">                <span class="comment">/*移除默认的Error Controller*/</span></div><div class="line">                .apis(Predicates.not(RequestHandlerSelectors.basePackage(<span class="string">"org.springframework.boot"</span>)))</div><div class="line">                .paths(PathSelectors.any())</div><div class="line">                .build()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">generateApiInfo</span><span class="params">()</span></span>: ApiInfo &#123;</div><div class="line">        <span class="keyword">return</span> ApiInfoBuilder().title(<span class="string">"Spring Boot Api Doc"</span>)</div><div class="line">                .contact(Contact(<span class="string">"Doublemine"</span>, <span class="string">"https://notes.wanghao.work"</span>, <span class="string">"doublemine.w@gmail.com"</span>))</div><div class="line">                .description(<span class="string">"This is a sample api doc description"</span>)</div><div class="line">                .build()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述示例只演示了最基本的配置，如果想查看完整的示例解释，请移步<a href="http://springfox.github.io/springfox/docs/current/#configuration-explained" target="_blank" rel="external">Configuration explained</a>,至此，Springfox的配置就完成了。就是这么简单。</p>
<hr>
<h3 id="创建接口"><a href="#创建接口" class="headerlink" title="创建接口"></a>创建接口</h3><p>我们创建一个简单的UserController来模拟获取用户信息，<code>UserController.kt</code>：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping(<span class="meta-string">"/user/"</span>)</span></div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> : <span class="type">BaseController</span></span>() &#123;</div><div class="line">    <span class="meta">@RequestMapping(value = <span class="meta-string">"/info/&#123;id&#125;"</span>, method = arrayOf(RequestMethod.GET)</span>)</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getUserInfoById</span><span class="params">(<span class="meta">@PathVariable</span> id: <span class="type">Int</span>)</span></span>: User &#123;</div><div class="line">        <span class="keyword">return</span> User(id, <span class="string">"小白"</span>, <span class="number">35</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对应的Model<code>User.kt</code>:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>(<span class="keyword">val</span> id: <span class="built_in">Int</span>, <span class="keyword">var</span> name: String, <span class="keyword">var</span> age: <span class="built_in">Int</span>)</div></pre></td></tr></table></figure>
<p>至此就完成了简单的接口，接着我们启动项目并访问<a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="external">http://localhost:8080/swagger-ui.html</a> ，一切正常的话，你将会看到以下页面：</p>
<p><img src="https://ws1.sinaimg.cn/large/694830ebgy1fh4gacpr8wj21sk0su0wr.jpg" alt=""></p>
<p>一般来说这样已经能够满足我们的基本需要了，如果还需要更为详细的文档，Springfox也提供的注解来简化配置过程，我们接下来稍微修改下<code>UserController.kt</code>：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Api(tags = arrayOf(<span class="meta-string">"用户信息"</span>)</span>)</div><div class="line"><span class="meta">@RequestMapping(<span class="meta-string">"/user/"</span>)</span></div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> : <span class="type">BaseController</span></span>() &#123;</div><div class="line">    <span class="meta">@ApiOperation(<span class="meta-string">"获取用户信息"</span>, notes = <span class="meta-string">"根据用户Id在来查询用户信息"</span>)</span></div><div class="line">    <span class="meta">@RequestMapping(value = <span class="meta-string">"/info/&#123;id&#125;"</span>, method = arrayOf(RequestMethod.GET)</span>)</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getUserInfoById</span><span class="params">(<span class="meta">@PathVariable</span> id: <span class="type">Int</span>)</span></span>: User &#123;</div><div class="line">        <span class="keyword">return</span> User(id, <span class="string">"小白"</span>, <span class="number">35</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们重启项目查看下：</p>
<p><img src="https://ws1.sinaimg.cn/large/694830ebgy1fh4gfu3btij21qo0qi786.jpg" alt=""></p>
<p>可以发现文档添加了对应的中文，要查看全部可用的注解以及其作用，请移步官方文档：</p>
<ul>
<li><a href="http://springfox.github.io/springfox/docs/current/#support-for-documentation-from-property-file-lookup" target="_blank" rel="external"> Support for documentation from property file lookup</a></li>
<li><a href="https://github.com/swagger-api/swagger-core/wiki/Annotations-1.5.X" target="_blank" rel="external">Swagger-Core Annotations</a></li>
</ul>
<p>简单集成使用到这里👌咯，后续再写一写生成静态文档相关的内容吧。Just for Fun！</p>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;在做Android开发的时候，对于Api接口的对接有着深刻的体会：后端通过Markdown或者Word写好Api文档，然后通过类似Samba或者Dropbox这样的服务与移动端实现文档共享。有的时候因为接口出了问题，中间还得来回修改对接，效率低下不说，要是后端手抖写错参数而没有意识到，移动端埋头一顿调试。。。说多了都是泪。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;为了避免同时维护代码和文档来保持两者之间的同步而带来的额外负担，同事推荐了&lt;a href=&quot;http://apidocjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;ApiDoc&lt;/code&gt;&lt;/a&gt;来生成文档，虽然生成的文档界面比较清爽然而前提是必须得按照规定的语法写上详细的注释，才能生成对应的文档，虽然写注释本身是一件好事，不过有能够自动生成的方法为啥不使用呢?&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swagger" scheme="https://notes.wanghao.work/tags/Swagger/"/>
    
      <category term="Spring Boot" scheme="https://notes.wanghao.work/tags/Spring-Boot/"/>
    
      <category term="Gradle" scheme="https://notes.wanghao.work/tags/Gradle/"/>
    
      <category term="Kotlin" scheme="https://notes.wanghao.work/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>解决Git refusing to merge unrelated histories问题</title>
    <link href="https://notes.wanghao.work/2017-06-28-%E8%A7%A3%E5%86%B3Git-refusing-to-merge-unrelated-histories%E9%97%AE%E9%A2%98.html"/>
    <id>https://notes.wanghao.work/2017-06-28-解决Git-refusing-to-merge-unrelated-histories问题.html</id>
    <published>2017-06-28T02:40:36.000Z</published>
    <updated>2017-06-28T03:01:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在使用brew更新了git之后，发现在与Github上的新创建的<code>repo</code>建立关联的之后，进行<code>pull</code>操作会出现类似于下面的这种错误：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> * branch            master     -&gt; FETCH_HEAD</div><div class="line"> * [new branch]      master     -&gt; origin/master</div><div class="line">fatal: refusing to merge unrelated histories</div></pre></td></tr></table></figure>
<p>通过查阅资料显示，GIt从版本<code>2.9.0</code>开始，预设行为不允许合并没有共同祖先的分支，需要加上<code>--allow-unrelated-histories</code>选项进行pull操作才不会出现此类错误信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull origin master --allow-unrelated-histories</div></pre></td></tr></table></figure>
<p>相关参考：</p>
<ul>
<li><a href="https://git-scm.com/docs/git-merge/2.9.0" target="_blank" rel="external">Git merge (2.9.0)</a></li>
<li><a href="https://stackoverflow.com/questions/37937984/git-refusing-to-merge-unrelated-histories" target="_blank" rel="external">StackoverFlow: Git refusing to merge unrelated histories</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在使用brew更新了git之后，发现在与Github上的新创建的&lt;code&gt;repo&lt;/code&gt;建立关联的之后，进行&lt;code&gt;pull&lt;/code&gt;操作会出现类似于下面的这种错误：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table
    
    </summary>
    
    
      <category term="Git" scheme="https://notes.wanghao.work/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Docker Compose：链接外部容器的几种方式</title>
    <link href="https://notes.wanghao.work/2017-06-12-Docker-Compose-%E9%93%BE%E6%8E%A5%E5%A4%96%E9%83%A8%E5%AE%B9%E5%99%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F.html"/>
    <id>https://notes.wanghao.work/2017-06-12-Docker-Compose-链接外部容器的几种方式.html</id>
    <published>2017-06-12T15:04:41.000Z</published>
    <updated>2017-06-14T15:12:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>在Docker中，容器之间的链接是一种很常见的操作：它提供了访问其中的某个容器的网络服务而不需要将所需的端口暴露给Docker Host主机的功能。Docker Compose中对该特性的支持同样是很方便的。然而，如果需要链接的容器没有定义在同一个<code>docker-compose.yml</code>中的时候，这个时候就稍微麻烦复杂了点。</p>
</div>
<a id="more"></a>
<p>在不使用Docker Compose的时候，将两个容器链接起来使用<code>—link</code>参数，相对来说比较简单，以<code>nginx</code>镜像为例子：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker run --rm --name test1 -d nginx  #开启一个实例test1</div><div class="line">docker run --rm --name test2 --link test1 -d nginx #开启一个实例test2并与test1建立链接</div></pre></td></tr></table></figure>
<p>这样，<code>test2</code>与<code>test1</code>便建立了链接，就可以在<code>test2</code>中使用访问<code>test1</code>中的服务了。</p>
<p>如果使用Docker Compose，那么这个事情就更简单了，还是以上面的<code>nginx</code>镜像为例子，编辑<code>docker-compose.yml</code>文件为：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="attr">version:</span> <span class="string">"3"</span></div><div class="line"><span class="attr">services:</span></div><div class="line"><span class="attr">  test2:</span></div><div class="line"><span class="attr">    image:</span> <span class="string">nginx</span></div><div class="line"><span class="attr">    depends_on:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">test1</span></div><div class="line"><span class="attr">    links:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">test1</span></div><div class="line"><span class="attr">  test1:</span></div><div class="line"><span class="attr">    image:</span> <span class="string">nginx</span></div></pre></td></tr></table></figure>
<p>最终效果与使用普通的Docker命令<code>docker run xxxx</code>建立的链接并无区别。这只是一种最为理想的情况。</p>
<hr>
<ol>
<li>如果容器没有定义在同一个<code>docker-compose.yml</code>文件中，应该如何链接它们呢？</li>
<li>又如果定义在<code>docker-compose.yml</code>文件中的容器需要与<code>docker run xxx</code>启动的容器链接，需要如何处理？</li>
</ol>
<p>针对这两种典型的情况，下面给出我个人测试可行的办法：</p>
<hr>
<h3 id="方式一：让需要链接的容器同属一个外部网络"><a href="#方式一：让需要链接的容器同属一个外部网络" class="headerlink" title="方式一：让需要链接的容器同属一个外部网络"></a>方式一：让需要链接的容器同属一个外部网络</h3><p>我们还是使用nginx镜像来模拟这样的一个情景：假设我们需要将两个使用Docker Compose管理的nignx容器（<code>test1</code>和<code>test2</code>）链接起来，使得<code>test2</code>能够访问<code>test1</code>中提供的服务，这里我们以能ping通为准。</p>
<p>首先，我们定义容器<code>test1</code>的<code>docker-compose.yml</code>文件内容为：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="attr">version:</span> <span class="string">"3"</span></div><div class="line"><span class="attr">services:</span></div><div class="line"><span class="attr">  test2:</span></div><div class="line"><span class="attr">    image:</span> <span class="string">nginx</span></div><div class="line"><span class="attr">    container_name:</span> <span class="string">test1</span></div><div class="line"><span class="attr">    networks:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">default</span></div><div class="line"><span class="bullet">      -</span> <span class="string">app_net</span></div><div class="line"><span class="attr">networks:</span></div><div class="line"><span class="attr">  app_net:</span></div><div class="line"><span class="attr">    external:</span> <span class="literal">true</span></div></pre></td></tr></table></figure>
<p>容器<code>test2</code>内容与<code>test1</code>基本一样，只是多了一个<code>external_links</code>,需要特别说明的是：<strong>最近发布的Docker版本已经不需要使用external_links来链接容器，容器的DNS服务可以正确的作出判断</strong>，因此如果你你需要兼容较老版本的Docker的话，那么容器<code>test2</code>的<code>docker-compose.yml</code>文件内容为：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="attr">version:</span> <span class="string">"3"</span></div><div class="line"><span class="attr">services:</span></div><div class="line"><span class="attr">  test2:</span></div><div class="line"><span class="attr">    image:</span> <span class="string">nginx</span></div><div class="line"><span class="attr">    networks:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">default</span></div><div class="line"><span class="bullet">      -</span> <span class="string">app_net</span></div><div class="line"><span class="attr">    external_links:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">test1</span></div><div class="line"><span class="attr">    container_name:</span> <span class="string">test2</span></div><div class="line"><span class="attr">networks:</span></div><div class="line"><span class="attr">  app_net:</span></div><div class="line"><span class="attr">    external:</span> <span class="literal">true</span></div></pre></td></tr></table></figure>
<p>否则的话，<code>test2</code>的<code>docker-compose.yml</code>和<code>test1</code>的定义完全一致，不需要额外多指定一个<code>external_links</code>。相关的问题请参见stackoverflow上的相关问题：<a href="https://stackoverflow.com/questions/39067295/docker-compose-external-container" target="_blank" rel="external">docker-compose + external container</a></p>
<p>正如你看到的那样，这里两个容器的定义里都使用了同一个外部网络<code>app_net</code>,因此，我们需要在启动这两个容器之前通过以下命令再创建外部网络：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker network create app_net</div></pre></td></tr></table></figure>
<p>之后，通过<code>docker-compose up -d</code>命令启动这两个容器，然后执行<code>docker exec -it test2 ping test1</code>,你将会看到如下的输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">docker exec -it test2 ping test1</div><div class="line">PING test1 (172.18.0.2): 56 data bytes</div><div class="line">64 bytes from 172.18.0.2: icmp_seq=0 ttl=64 time=0.091 ms</div><div class="line">64 bytes from 172.18.0.2: icmp_seq=1 ttl=64 time=0.146 ms</div><div class="line">64 bytes from 172.18.0.2: icmp_seq=2 ttl=64 time=0.150 ms</div><div class="line">64 bytes from 172.18.0.2: icmp_seq=3 ttl=64 time=0.145 ms</div><div class="line">64 bytes from 172.18.0.2: icmp_seq=4 ttl=64 time=0.126 ms</div><div class="line">64 bytes from 172.18.0.2: icmp_seq=5 ttl=64 time=0.147 ms</div></pre></td></tr></table></figure>
<p>证明这两个容器是成功链接了，反过来在<code>test1</code>中ping<code>test2</code>也是能够正常ping通的。</p>
<p>如果我们通过<code>docker run --rm --name test3 -d nginx</code>这种方式来先启动了一个容器(<code>test3</code>)并且没有指定它所属的外部网络，而需要将其与<code>test1</code>或者<code>test2</code>链接的话，这个时候手动链接外部网络即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker network connect app_net test3</div></pre></td></tr></table></figure>
<p>这样，三个容器都可以相互访问了。</p>
<hr>
<h3 id="方式二：更改需要链接的容器的网络模式"><a href="#方式二：更改需要链接的容器的网络模式" class="headerlink" title="方式二：更改需要链接的容器的网络模式"></a>方式二：更改需要链接的容器的网络模式</h3><p>通过更改你想要相互链接的容器的网络模式为<code>bridge</code>,并指定需要链接的外部容器（<code>external_links</code>)即可。与同属外部网络的容器可以相互访问的链接方式一不同，这种方式的访问是单向的。</p>
<p>还是以nginx容器镜像为例子，如果容器实例<code>nginx1</code>需要访问容器实例<code>nginx2</code>，那么<code>nginx2</code>的<code>doker-compose.yml</code>定义为：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attr">version:</span> <span class="string">"3"</span></div><div class="line"><span class="attr">services:</span></div><div class="line"><span class="attr">  nginx2:</span></div><div class="line"><span class="attr">    image:</span> <span class="string">nginx</span></div><div class="line"><span class="attr">    container_name:</span> <span class="string">nginx2</span></div><div class="line"><span class="attr">    network_mode:</span> <span class="string">bridge</span></div></pre></td></tr></table></figure>
<p>与其对应的，<code>nginx1</code>的<code>docker-compose.yml</code>定义为：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="attr">version:</span> <span class="string">"3"</span></div><div class="line"><span class="attr">services:</span></div><div class="line"><span class="attr">  nginx1:</span></div><div class="line"><span class="attr">    image:</span> <span class="string">nginx</span></div><div class="line"><span class="attr">    external_links:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">nginx2</span></div><div class="line"><span class="attr">    container_name:</span> <span class="string">nginx1</span></div><div class="line"><span class="attr">    network_mode:</span> <span class="string">bridge</span></div></pre></td></tr></table></figure>
<blockquote>
<p>需要特别说明的是，这里的<code>external_links</code>是不能省略的，而且<code>nginx1</code>的启动必须要在<code>nginx2</code>之后，否则可能会报找不到容器<code>nginx2</code>的错误。</p>
</blockquote>
<p>接着我们使用ping来测试下连通性：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ docker exec -it nginx1 ping nginx2  # nginx1 to nginx2</div><div class="line">PING nginx2 (172.17.0.4): 56 data bytes</div><div class="line">64 bytes from 172.17.0.4: icmp_seq=0 ttl=64 time=0.141 ms</div><div class="line">64 bytes from 172.17.0.4: icmp_seq=1 ttl=64 time=0.139 ms</div><div class="line">64 bytes from 172.17.0.4: icmp_seq=2 ttl=64 time=0.145 ms</div><div class="line"></div><div class="line">$ docker exec -it nginx2 ping nginx1 #nginx2 to nginx1</div><div class="line">ping: unknown host</div></pre></td></tr></table></figure>
<p>以上也能充分证明这种方式是属于单向联通的。</p>
<p>在实际应用中根据自己的需要灵活的选择这两种链接方式，如果想偷懒的话，大可选择第二种。不过我更推荐第一种，不难看出无论是联通性还是灵活性，较为更改网络模式的第二种都更为友好。</p>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;在Docker中，容器之间的链接是一种很常见的操作：它提供了访问其中的某个容器的网络服务而不需要将所需的端口暴露给Docker Host主机的功能。Docker Compose中对该特性的支持同样是很方便的。然而，如果需要链接的容器没有定义在同一个&lt;code&gt;docker-compose.yml&lt;/code&gt;中的时候，这个时候就稍微麻烦复杂了点。&lt;/p&gt;
&lt;/div&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://notes.wanghao.work/tags/Docker/"/>
    
      <category term="Docker Compose" scheme="https://notes.wanghao.work/tags/Docker-Compose/"/>
    
  </entry>
  
  <entry>
    <title>MySQL API Drivers安装小记</title>
    <link href="https://notes.wanghao.work/2017-05-20-%E8%A7%A3%E5%86%B3Mysql%E7%9A%84Python%E9%A9%B1%E5%8A%A8%E5%AE%89%E8%A3%85%E5%A4%B1%E8%B4%A5.html"/>
    <id>https://notes.wanghao.work/2017-05-20-解决Mysql的Python驱动安装失败.html</id>
    <published>2017-05-19T18:12:46.000Z</published>
    <updated>2017-05-20T15:29:36.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>最近需要使用Django写点东西，由于自己的macbook上没有也不打算安装MySQL而是以Docker的MySQL镜像替代，Django文档提供了三种MySQL驱动供选择，官方推荐的是<a href="https://pypi.python.org/pypi/mysqlclient" target="_blank" rel="external"><code>mysqlclient</code></a>,由于我本地没有安装MySQL，所以是没有Native Driver的以至于在安装MySQL驱动的时候遇到了点小问题，在此记录下。</p>
<hr>
<a id="more"></a>
<h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><p>安装<code>mysqlclient</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install mysqlclient</div></pre></td></tr></table></figure>
<p>然而得到错误信息如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Collecting mysqlclient</div><div class="line">  Using cached mysqlclient-1.3.10.tar.gz</div><div class="line">    Complete output from command python setup.py egg_info:</div><div class="line">    /bin/sh: mysql_config: command not found</div><div class="line">    Traceback (most recent call last):</div><div class="line">      File "&lt;string&gt;", line 1, in &lt;module&gt;</div><div class="line">      File "/private/var/folders/ll/d2yyxp555ss1gm613y33hfy80000gn/T/pip-build-mcd2q8ly/mysqlclient/setup.py", line 17, in &lt;module&gt;</div><div class="line">        metadata, options = get_config()</div><div class="line">      File "/private/var/folders/ll/d2yyxp555ss1gm613y33hfy80000gn/T/pip-build-mcd2q8ly/mysqlclient/setup_posix.py", line 44, in get_config</div><div class="line">        libs = mysql_config("libs_r")</div><div class="line">      File "/private/var/folders/ll/d2yyxp555ss1gm613y33hfy80000gn/T/pip-build-mcd2q8ly/mysqlclient/setup_posix.py", line 26, in mysql_config</div><div class="line">        raise EnvironmentError("%s not found" % (mysql_config.path,))</div><div class="line">    OSError: mysql_config not found</div><div class="line"></div><div class="line">    ----------------------------------------</div><div class="line">Command "python setup.py egg_info" failed with error code 1 in /private/var/folders/ll/d2yyxp555ss1gm613y33hfy80000gn/T/pip-build-mcd2q8ly/mysqlclient/</div></pre></td></tr></table></figure>
<p>因为没有安装MySQL，所以在安装<code>mysqlclient</code>之前还需要安装Connector，如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install mysql-connector-c</div></pre></td></tr></table></figure>
<p>之后安装再安装<code>mysqlclient</code>：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install mysqlclient</div></pre></td></tr></table></figure>
<p>然后又就报错了，错误信息如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Collecting mysqlclient</div><div class="line">  Using cached mysqlclient-1.3.10.tar.gz</div><div class="line">    Complete output from command python setup.py egg_info:</div><div class="line">    Traceback (most recent call last):</div><div class="line">      File "&lt;string&gt;", line 1, in &lt;module&gt;</div><div class="line">      File "/private/var/folders/ll/d2yyxp555ss1gm613y33hfy80000gn/T/pip-build-smwmu1qn/mysqlclient/setup.py", line 17, in &lt;module&gt;</div><div class="line">        metadata, options = get_config()</div><div class="line">      File "/private/var/folders/ll/d2yyxp555ss1gm613y33hfy80000gn/T/pip-build-smwmu1qn/mysqlclient/setup_posix.py", line 54, in get_config</div><div class="line">        libraries = [dequote(i[2:]) for i in libs if i.startswith('-l')]</div><div class="line">      File "/private/var/folders/ll/d2yyxp555ss1gm613y33hfy80000gn/T/pip-build-smwmu1qn/mysqlclient/setup_posix.py", line 54, in &lt;listcomp&gt;</div><div class="line">        libraries = [dequote(i[2:]) for i in libs if i.startswith('-l')]</div><div class="line">      File "/private/var/folders/ll/d2yyxp555ss1gm613y33hfy80000gn/T/pip-build-smwmu1qn/mysqlclient/setup_posix.py", line 12, in dequote</div><div class="line">        if s[0] in "\"'" and s[0] == s[-1]:</div><div class="line">    IndexError: string index out of range</div><div class="line"></div><div class="line">    ----------------------------------------</div><div class="line">Command "python setup.py egg_info" failed with error code 1 in /private/var/folders/ll/d2yyxp555ss1gm613y33hfy80000gn/T/pip-build-smwmu1qn/mysqlclient/</div></pre></td></tr></table></figure>
<hr>
<h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>通过查找资料得出可能的结论是通过brew安装的<code>mysql-connector-c</code>配置可能不正确，打开<code>/usr/local/bin/mysql_config</code>脚本修改其中的部分内容:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Create options</span></div><div class="line">libs=<span class="string">"-L<span class="variable">$pkglibdir</span>"</span></div><div class="line">libs=<span class="string">"<span class="variable">$libs</span>  -l"</span></div></pre></td></tr></table></figure>
<p>修改为：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> Create options</span></div><div class="line">libs="-L$pkglibdir"</div><div class="line">libs="$libs  -lmysqlclient -lssl -lcrypto"</div></pre></td></tr></table></figure>
<p>保存，再次安装<code>mysqlclient</code>应该就会正常安装了。接着就可以使用Django和运行在Docker中的MySQL愉快的Coding了～</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;最近需要使用Django写点东西，由于自己的macbook上没有也不打算安装MySQL而是以Docker的MySQL镜像替代，Django文档提供了三种MySQL驱动供选择，官方推荐的是&lt;a href=&quot;https://pypi.python.org/pypi/mysqlclient&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;mysqlclient&lt;/code&gt;&lt;/a&gt;,由于我本地没有安装MySQL，所以是没有Native Driver的以至于在安装MySQL驱动的时候遇到了点小问题，在此记录下。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://notes.wanghao.work/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio生成Java方法描述符</title>
    <link href="https://notes.wanghao.work/2017-03-21-Android-Studio%E6%94%AF%E6%8C%81%E7%94%9F%E6%88%90Java-Native%E6%96%B9%E6%B3%95%E7%AD%BE%E5%90%8D.html"/>
    <id>https://notes.wanghao.work/2017-03-21-Android-Studio支持生成Java-Native方法签名.html</id>
    <published>2017-03-21T13:32:50.000Z</published>
    <updated>2017-03-29T15:53:25.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>在日常的Android NDK开发中，会不可避免的用到C与Java代码相互调用的情况。Java调用C的方法还好，C调用Java的方法就比较麻烦了。需要编写看着就头疼的Java方法描述符才能正确的调用Java方法。 </p>
</div>
<p>其中常见的Java方法域和描述符如下表所示：</p>
<table>
<thead>
<tr>
<th style="text-align:center">Java类型</th>
<th style="text-align:center">签名</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Boolean</td>
<td style="text-align:center">Z</td>
</tr>
<tr>
<td style="text-align:center">Byte</td>
<td style="text-align:center">B</td>
</tr>
<tr>
<td style="text-align:center">Char</td>
<td style="text-align:center">C</td>
</tr>
<tr>
<td style="text-align:center">Short</td>
<td style="text-align:center">S</td>
</tr>
<tr>
<td style="text-align:center">Int</td>
<td style="text-align:center">I</td>
</tr>
<tr>
<td style="text-align:center">Long</td>
<td style="text-align:center">J</td>
</tr>
<tr>
<td style="text-align:center">Float</td>
<td style="text-align:center">F</td>
</tr>
<tr>
<td style="text-align:center">Double</td>
<td style="text-align:center">D</td>
</tr>
<tr>
<td style="text-align:center">Fully-qualified-class</td>
<td style="text-align:center">Lfully-qualified-class</td>
</tr>
<tr>
<td style="text-align:center">type[]</td>
<td style="text-align:center">[type</td>
</tr>
<tr>
<td style="text-align:center">Method type</td>
<td style="text-align:center">(arg-type)ret-type</td>
</tr>
</tbody>
</table>
<p>通过上述对照表，我们可以通过C代码查找一个为<code>String</code>类型的Java静态字段，例如:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">jfieldID staticJavaFieldId;</div><div class="line">staticJavaFieldId = env-&gt;GetStaticFieldID(clazz, <span class="string">"mStaticField"</span>, <span class="string">"Ljava/lang/String;"</span>);</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* do something...</span></div><div class="line"><span class="comment">**/</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<hr>
<p>借助<code>javap</code>我们可以很方便的得知一个<code>class</code>文件其中包含对应的描述符。如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$ javap -s -p com.xiamo.test.Message</div><div class="line">  </div><div class="line">Compiled from <span class="string">"Message.java"</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">xiamo</span>.<span class="title">test</span>.<span class="title">Message</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> java.lang.String TAG;</div><div class="line">    descriptor: Ljava/lang/String;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CHECK_POINT;</div><div class="line">    descriptor: I</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ERROR_NOT_SERVER;</div><div class="line">    descriptor: I</div><div class="line">  <span class="keyword">public</span> <span class="keyword">int</span> errorCode;</div><div class="line">    descriptor: I</div><div class="line">  <span class="keyword">public</span> java.lang.String message;</div><div class="line">    descriptor: Ljava/lang/String;</div><div class="line">  <span class="keyword">public</span> com.xiamo.test.Message();</div><div class="line">    descriptor: ()V</div></pre></td></tr></table></figure>
<p>但是每次需要查看对应类的方法描述符的时候都需要手动敲一次命令，这样显然不够清真。好在<code>Android Studio</code>为我们提供了<code>External Tools</code>。我们可以用它来自定义这个操作简化我们的双手。</p>
<h3 id="设置External-Tools"><a href="#设置External-Tools" class="headerlink" title="设置External Tools"></a>设置External Tools</h3><p>打开<code>Android Studio</code>的设置页面，在<code>Tools</code>选项卡中选中<code>External Tools</code>，如下图所示：</p>
<p><img src="http://7xkj6q.com1.z0.glb.clouddn.com/image/jni/external%20tools.png" alt="" title="选择External Tools"></p>
<p>点击右侧区域的<code>+</code>新增一个<code>Tools</code>,在选卡中填入如下图所示的参数:</p>
<p><img src="http://7xkj6q.com1.z0.glb.clouddn.com/image/jni/config.png" alt="" title="设置External Tools"></p>
<ul>
<li><code>Name</code> 为你要设置的<code>External Tools</code>的名字，便于你自己标识就行，此处我设置为<code>JNI Descriptor Generator</code></li>
<li><code>Program</code>为<code>Tools</code>执行的命令的路径，如果你需要替换为你自己JDK中的<code>javap</code>修改这个值就行，此处使用<code>Android Studio</code>自带的<code>JDK</code>路径，填入<code>$JDKPath$/bin/javap</code></li>
<li><code>Parameters</code>为命令执行的参数，我们要获取方法描述符，所以设置为：<code>-s -p $FileClass$</code></li>
<li><code>Working directory</code>为上述设置好的工具执行的目录，设置为<code>$ModuleFileDir$/build/intermediates/classes/debug</code></li>
</ul>
<p>点击保存，我们的<code>External Tools</code>就设置好啦。这个时候在<code>Tools</code>—&gt;<code>External Tools</code>中就可以看到我们设置好的<code>Tools</code>了。需要注意的是这个时候点击改工具查看当前我们选中的Java源文件的文件操作符，是可能会报错找不到指定的class文件。</p>
<p>这是因为我们指定的<code>Working directory</code>中还没有生成class文件，选择<code>Build</code>选项中的<code>Make Project</code>，等待make完成，再次点击<code>Tools</code>—&gt;<code>External Tools—&gt;</code> <code>JNI Descriptor Generator</code> 即可生成对应Java源文件的文件描述符了。这样我们就可以愉快的调用使用C调用Java中的方法咯。</p>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;在日常的Android NDK开发中，会不可避免的用到C与Java代码相互调用的情况。Java调用C的方法还好，C调用Java的方法就比较麻烦了。需要编写看着就头疼的Java方法描述符才能正确的调用Java方法。 &lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;其中常见的Java方法域和描述符如下表所示：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Java类型&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;签名&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Boolean&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Z&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Byte&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Char&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;C&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Short&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;S&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Int&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;I&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Long&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;J&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Float&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;F&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Double&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;D&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Fully-qualified-class&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Lfully-qualified-class&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;type[]&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;[type&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Method type&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;(arg-type)ret-type&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;通过上述对照表，我们可以通过C代码查找一个为&lt;code&gt;String&lt;/code&gt;类型的Java静态字段，例如:&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;jfieldID staticJavaFieldId;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;staticJavaFieldId = env-&amp;gt;GetStaticFieldID(clazz, &lt;span class=&quot;string&quot;&gt;&quot;mStaticField&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Ljava/lang/String;&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* do something...&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;**/&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://notes.wanghao.work/tags/Android/"/>
    
      <category term="Android Studio" scheme="https://notes.wanghao.work/tags/Android-Studio/"/>
    
      <category term="JNI" scheme="https://notes.wanghao.work/tags/JNI/"/>
    
  </entry>
  
  <entry>
    <title>FFmpeg折腾笔记之编译FFmpeg</title>
    <link href="https://notes.wanghao.work/2017-01-13-FFmpeg%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%BC%96%E8%AF%91FFmpeg.html"/>
    <id>https://notes.wanghao.work/2017-01-13-FFmpeg折腾笔记之编译FFmpeg.html</id>
    <published>2017-01-13T13:58:04.000Z</published>
    <updated>2017-06-14T15:23:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>​        又有很久没有写新的文章了，感觉再不写点什么东西博客草都长满了。于是打算折腾下FFmpeg，记录下折腾的过程，以熟悉Android NDK开发的基本操作。过程中有地方有错误欢迎指出，如果你对这个方面有所了解，欢迎讨论指教。</p>
<h4 id="编译环境"><a href="#编译环境" class="headerlink" title="编译环境"></a>编译环境</h4><ul>
<li><a href="https://ffmpeg.org/releases/ffmpeg-2.8.11.tar.bz2" target="_blank" rel="external">FFmpeg 2.8.11 “Feynman”</a></li>
<li>Mac OS X </li>
<li>NDK  <code>14.0.3770861</code></li>
</ul>
<p>下载完成FFmpeg源码之后，先对源码根目录中的<code>configure</code>文件进行修改以适应Android平台。因为默认编译出来的动态库文件版本号在<code>.so</code>之后，例如：<code>libavcodec.so.56.60.100</code>。Android平台对这种格式不能很好的识别（如果你不介意一个一个修改文件名的话）。通过<code>Vim</code>或者其他文本编辑器打开<code>configure</code>文件的第<code>2934</code>行（如果你下载的FFmpeg版本和我的一样的话）将:</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SLIBNAME_WITH_MAJOR='$(SLIBNAME).$(LIBMAJOR)'</div><div class="line">LIB_INSTALL_EXTRA_CMD='$$(RANLIB) "$(LIBDIR)/$(LIBNAME)"'</div><div class="line">SLIB_INSTALL_NAME='$(SLIBNAME_WITH_VERSION)'</div><div class="line">SLIB_INSTALL_LINKS='$(SLIBNAME_WITH_MAJOR) $(SLIBNAME)'</div></pre></td></tr></table></figure>
<p>修改为:</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SLIBNAME_WITH_MAJOR='$(SLIBPREF)$(FULLNAME)-$(LIBMAJOR)$(SLIBSUF)'  </div><div class="line">LIB_INSTALL_EXTRA_CMD='$$(RANLIB)"$(LIBDIR)/$(LIBNAME)"'  </div><div class="line">SLIB_INSTALL_NAME='$(SLIBNAME_WITH_MAJOR)'  </div><div class="line">SLIB_INSTALL_LINKS='$(SLIBNAME)'</div></pre></td></tr></table></figure>
<p>后保存。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​        又有很久没有写新的文章了，感觉再不写点什么东西博客草都长满了。于是打算折腾下FFmpeg，记录下折腾的过程，以熟悉Android NDK开发的基本操作。过程中有地方有错误欢迎指出，如果你对这个方面有所了解，欢迎讨论指教。&lt;/p&gt;
&lt;h4 id=&quot;编译环境&quot;
    
    </summary>
    
    
      <category term="Android" scheme="https://notes.wanghao.work/tags/Android/"/>
    
      <category term="FFmpeg" scheme="https://notes.wanghao.work/tags/FFmpeg/"/>
    
      <category term="NDK" scheme="https://notes.wanghao.work/tags/NDK/"/>
    
  </entry>
  
  <entry>
    <title>Mac自带VNC Client</title>
    <link href="https://notes.wanghao.work/2016-11-24-Mac%E8%87%AA%E5%B8%A6VNC-Client.html"/>
    <id>https://notes.wanghao.work/2016-11-24-Mac自带VNC-Client.html</id>
    <published>2016-11-24T13:57:28.000Z</published>
    <updated>2016-11-24T14:11:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于有需要远程VNC的需要，苦苦寻找一款Mac上比较好使的VNC Client，结果经人指点，发现原来MacOS自带了VNC Client，只是没有在Launchpad中显示罢了。使用<code>command</code>+<code>space</code> 调出<code>Spotlight搜索</code>键入<code>screen Sharing.app</code>即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于有需要远程VNC的需要，苦苦寻找一款Mac上比较好使的VNC Client，结果经人指点，发现原来MacOS自带了VNC Client，只是没有在Launchpad中显示罢了。使用&lt;code&gt;command&lt;/code&gt;+&lt;code&gt;space&lt;/code&gt; 调出&lt;co
    
    </summary>
    
    
      <category term="Mac" scheme="https://notes.wanghao.work/tags/Mac/"/>
    
      <category term="Tips" scheme="https://notes.wanghao.work/tags/Tips/"/>
    
  </entry>
  
  <entry>
    <title>开启Git大小写敏感</title>
    <link href="https://notes.wanghao.work/2016-11-24-%E5%BC%80%E5%90%AFGit%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F.html"/>
    <id>https://notes.wanghao.work/2016-11-24-开启Git大小写敏感.html</id>
    <published>2016-11-24T13:35:57.000Z</published>
    <updated>2016-11-24T13:53:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近公司开发的项目的时候，自己或者队友都经常会手抖针对某些文件的命名规范大小写写错。（毕竟入冬了。。）尤其是包名小写手抖写成大写了。。又由于我设置Android Studio新建文件自动添加到Git，一来二往，导致推上服务器之后发现自己命名有问题，顺手改成小写，这个时候问题就来了。</p>
<p>由于Git默认是大小写不敏感的，导致我这边虽然修改了，然而队友那边还是老样子，可能会导致后续的提交出现问题让项目无法编译通过，虽然不是什么大问题，稍微小改一下就行。然而鉴于这种问题出现了几次，每次都手动修改还是挺闹心的。我们还是来动手让Git区分大小写吧。</p>
<p>如果只是想应用于当前项目，那么在当前项目中使用执行以下<code>Git命令</code>：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config core.ignorecase false</div></pre></td></tr></table></figure>
<p>当然，如果想一劳永逸的话，推荐还是做一个全局配置:</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global core.ignorecase false</div></pre></td></tr></table></figure>
<p>这样之后的项目都不用担心大小写都问题闹心了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近公司开发的项目的时候，自己或者队友都经常会手抖针对某些文件的命名规范大小写写错。（毕竟入冬了。。）尤其是包名小写手抖写成大写了。。又由于我设置Android Studio新建文件自动添加到Git，一来二往，导致推上服务器之后发现自己命名有问题，顺手改成小写，这个时候问题
    
    </summary>
    
    
      <category term="Git" scheme="https://notes.wanghao.work/tags/Git/"/>
    
      <category term="Tips" scheme="https://notes.wanghao.work/tags/Tips/"/>
    
  </entry>
  
  <entry>
    <title>基于LeanCloud、Telegram实现多说评论推送</title>
    <link href="https://notes.wanghao.work/2016-10-26-%E5%9F%BA%E4%BA%8ELeanCloud%E3%80%81Telegram%E5%AE%9E%E7%8E%B0%E5%A4%9A%E8%AF%B4%E8%AF%84%E8%AE%BA%E6%8E%A8%E9%80%81.html"/>
    <id>https://notes.wanghao.work/2016-10-26-基于LeanCloud、Telegram实现多说评论推送.html</id>
    <published>2016-10-25T16:19:53.000Z</published>
    <updated>2017-06-30T17:41:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知多说评论是不支持主动推送的，也就是说如果访客主动留言评论，多说是不会给我们邮件推送提醒的。但是我们总不能每隔一段时间去检查下博客的评论留言吧，这样效率也太低了ヾ(。￣□￣)ﾂ゜゜゜于是趁着最近闲的蛋疼折腾出了这么个东东，能够实现访客主动评论的时候，在5分钟之内响应并通过Telegram推送到手机上方便查看和浏览。</p>
<hr>
<p>嗯，相关的源码和基本的部署说明丢在Github上了,感兴趣的可以<font color="red"><strong><a href="https://github.com/Doublemine/TelegramBot" target="_blank" rel="external">戳此查看</a></strong></font>。</p>
<ul>
<li><a href="https://github.com/Doublemine/TelegramBot" target="_blank" rel="external">Telegram Bot For DuoShuo</a></li>
</ul>
<p>目前保证基本的功能能够稳定的运行，后续再添加一些其它的功能吧。嗯，详细的配置说明先挖个坑，改天再写。懒癌犯了，先休息~</p>
<p><img src="https://ws1.sinaimg.cn/large/694830ebgy1fh3r3jys56g208c08cx6p.jpg" alt="" title="休息"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;众所周知多说评论是不支持主动推送的，也就是说如果访客主动留言评论，多说是不会给我们邮件推送提醒的。但是我们总不能每隔一段时间去检查下博客的评论留言吧，这样效率也太低了ヾ(。￣□￣)ﾂ゜゜゜于是趁着最近闲的蛋疼折腾出了这么个东东，能够实现访客主动评论的时候，在5分钟之内响应并
    
    </summary>
    
      <category term="Python" scheme="https://notes.wanghao.work/categories/Python/"/>
    
    
      <category term="LeanCloud" scheme="https://notes.wanghao.work/tags/LeanCloud/"/>
    
      <category term="Python" scheme="https://notes.wanghao.work/tags/Python/"/>
    
      <category term="Telegram" scheme="https://notes.wanghao.work/tags/Telegram/"/>
    
  </entry>
  
  <entry>
    <title>当Android应用被强杀之后</title>
    <link href="https://notes.wanghao.work/2016-09-10-AndroidProcessbeKilledweShoudIDo.html"/>
    <id>https://notes.wanghao.work/2016-09-10-AndroidProcessbeKilledweShoudIDo.html</id>
    <published>2016-09-10T11:00:20.000Z</published>
    <updated>2017-06-14T15:19:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android应用在后台运行的时候很容易被强杀，尤其是在国内XX助手、XX管家、XX大师之类的应用大行其道之下。如果我们开发的应用没有被用户加入白名单，很大程度上会被系统因为内存不足或者用户主动给应用在后台运行的时候杀掉。这个时候问题就来了：</p>
<ul>
<li><strong>如何保证我们的应用在被强杀之后用户再次回到应用来保证应用的稳定性而不Crash？</strong></li>
</ul>
<p>为了说明上述问题，我们来简单模拟这样一个过程:</p>
<blockquote>
<p>APP –&gt; ActivityA –&gt; ActivityB –&gt;ActivityC –&gt; Pressed Home</p>
</blockquote>
<p>假设APP在Activity C页面用户按下<code>Home</code>键应用退到后台运行。这个时候启动DDMS，选中该APP的进程，Kill。然后我们从运行APP历史列表中选中该APP并将其置于前台，这个时候回到该应用的界面还是Activity C。再点击返回按钮回到ActivityB，在某些性能比较差一点的机器上可能会出现短暂的黑屏然后才会显示出ActivityB。这是因为该Activity实例其实在Kill该APP进程的时候已经被销毁了，但是Android系统虽然销毁了Activity实例，却并没有销毁该APP的Activity栈。因此我们点击返回按钮还是会回到ActivityB。但是需要重新构建该ActivityB的实例。</p>
<p>这样看貌似并没有什么问题，然而事情并不会这么简单（废话，不然我写这篇博客干嘛。。），如果ActivityB中引用了静态变量并尝试获取其值的时候，这个时候是会出现NPE的。</p>
<a id="more"></a>
<p>我们简单来总结下上述过程:</p>
<ol>
<li><p>当应用在后台被Kill，整个APP进程都被销毁，所有变量都被清空，包括Application的实例。</p>
</li>
<li><p>虽然所有变量和实例都被销毁，但是Activity栈并没有被清空，所以我们回到应用还能得知页面的打开顺序。</p>
</li>
<li><p>当应用被强杀时，会自动调用<code>onSaveInstance</code>方法去保存一些核心变量，然而这在面对N多的页面的时候显然不是一件省心的事情，而且你也不能保证你的队友也会这么做。。</p>
</li>
<li><p>在某些性能比较低或者页面逻辑比较复杂的页面会黑屏是因为需要重建ActivityB的实例，也就是需要重走Activity的声明周期<code>OnCreate</code>，性能差点的机器上自然就会有短暂的黑屏了。</p>
</li>
</ol>
<p>如果APP中没有静态变量的引用，那就不会出现NEP，但是一旦引用了静态变量，这个时候可能就比较危险了。（静态变量包括全局的登录状态，全局的用户配置、标志位之类的数据）当然了，如果你能将所有的静态变量修改到单例中去，并将其持久化，为NULL的时候再去取的话，原则上来说这样也可以避免NPE。然而要是这样做的话很大程度上会减缓开发的进度，而且指不定哪个队友就给你挖坑了。然后你怎么挂的都不知道。。</p>
<p>为了一劳永逸的解决这个问题，我们需要冷静下来思考一下:<strong>既然APP被强杀了，为啥还要回到原先的页面中去而不是重走启动APP的流程?</strong></p>
<p>我们虽然不能阻止Android系统销毁实例却保存Activity栈，也不想多写那些持久化或者Cache静态变量代码（这将是一件费力而且不太讨好的事情）所以我们唯一能做的就是检测应用是否被强杀，并且在被强杀之后重走启动流程而不是回到原先的逻辑当中。</p>
<p>以下给出我的一种实现方式，如果你有更好的想法，欢迎和我交流:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">  </div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> FLAG;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> FLAG_NOT_INIT = <span class="number">200</span>;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    <span class="keyword">if</span> (FLAG != FLAG_NOT_INIT) &#123;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.getClass() == LauncherActivity.class) &#123;</div><div class="line">        FLAG = FLAG_NOT_INIT;</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        reLauncher();</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们实例化上述场景，给出一种对应关系:</p>
<p>ActivityA –&gt; 启动页</p>
<p>ActivityB –&gt; 主页</p>
<p>ActivityC –&gt; 详情页</p>
<p>其中将ActivityB的<code>launchMode</code>设置为<code>singleTask</code>，并且在BaseActivity中使用静态变量FLAG进行判断当前应用是否被强杀，如果被强杀则利用ActivityB的<code>launchMode</code>特性清空栈并重新初始化即可。</p>
<h6 id="有关Activity的启动模式相关文章，可参阅Activity启动模式图文详解"><a href="#有关Activity的启动模式相关文章，可参阅Activity启动模式图文详解" class="headerlink" title="有关Activity的启动模式相关文章，可参阅Activity启动模式图文详解"></a>有关Activity的启动模式相关文章，可参阅<a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0520/2897.html" target="_blank" rel="external">Activity启动模式图文详解</a></h6>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android应用在后台运行的时候很容易被强杀，尤其是在国内XX助手、XX管家、XX大师之类的应用大行其道之下。如果我们开发的应用没有被用户加入白名单，很大程度上会被系统因为内存不足或者用户主动给应用在后台运行的时候杀掉。这个时候问题就来了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;如何保证我们的应用在被强杀之后用户再次回到应用来保证应用的稳定性而不Crash？&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了说明上述问题，我们来简单模拟这样一个过程:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;APP –&amp;gt; ActivityA –&amp;gt; ActivityB –&amp;gt;ActivityC –&amp;gt; Pressed Home&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;假设APP在Activity C页面用户按下&lt;code&gt;Home&lt;/code&gt;键应用退到后台运行。这个时候启动DDMS，选中该APP的进程，Kill。然后我们从运行APP历史列表中选中该APP并将其置于前台，这个时候回到该应用的界面还是Activity C。再点击返回按钮回到ActivityB，在某些性能比较差一点的机器上可能会出现短暂的黑屏然后才会显示出ActivityB。这是因为该Activity实例其实在Kill该APP进程的时候已经被销毁了，但是Android系统虽然销毁了Activity实例，却并没有销毁该APP的Activity栈。因此我们点击返回按钮还是会回到ActivityB。但是需要重新构建该ActivityB的实例。&lt;/p&gt;
&lt;p&gt;这样看貌似并没有什么问题，然而事情并不会这么简单（废话，不然我写这篇博客干嘛。。），如果ActivityB中引用了静态变量并尝试获取其值的时候，这个时候是会出现NPE的。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://notes.wanghao.work/categories/Android/"/>
    
    
      <category term="Android" scheme="https://notes.wanghao.work/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android之Keystore文件签名</title>
    <link href="https://notes.wanghao.work/2016-07-03-Android%E4%B9%8BKeystore%E6%96%87%E4%BB%B6%E7%AD%BE%E5%90%8D.html"/>
    <id>https://notes.wanghao.work/2016-07-03-Android之Keystore文件签名.html</id>
    <published>2016-07-03T12:58:16.000Z</published>
    <updated>2016-11-06T01:31:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android应用开发的时候会经常使用到第三方SDK，例如地图、推送、支付以及分享等。而这些第三方服务SDK为了应用不被滥用都会有签名验证机制。我们通过上传Android应用的签名来在服务端配置以验证应用的合法性。本文将讲述下在Android Stduio中常用的签名操作。</p>
<h3 id="默认KeyStore"><a href="#默认KeyStore" class="headerlink" title="默认KeyStore"></a>默认KeyStore</h3><h4 id="默认KeyStore存储路径"><a href="#默认KeyStore存储路径" class="headerlink" title="默认KeyStore存储路径"></a>默认KeyStore存储路径</h4><p>在Android Stduio中系统默认内置了一个签名文件<code>debug.keystore</code>，用于我们在debug下的默认App签名。如果没有在Gradle文件中特殊指定，那么Android Studio将自动使用默认的<code>debug.keystore</code>文件为项目App生成Debug版本的签名。</p>
<a id="more"></a>
<ul>
<li><p>在Mac/Linux系统中，<code>debug.keystore</code>文件默认储存在<code>~/.android/</code>路径下。</p>
</li>
<li><p>在Windows系统中，<code>debug.keystore</code>文件将默认存储在<code>C:\Users\{USERNAME}\.android\</code>路径下。</p>
</li>
</ul>
<h4 id="获取默认KeyStore-SHA-1"><a href="#获取默认KeyStore-SHA-1" class="headerlink" title="获取默认KeyStore SHA-1"></a>获取默认KeyStore <code>SHA-1</code></h4><p>知道了Android Stduio 默认的<code>debug.keystore</code>之后，下一步我们将是要获取其指纹信息，以便于在第三方服务配置中填入Debug指纹信息。</p>
<ul>
<li>在Linux/Mac系统中，打开终端并输入以下命令:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keytool -list -v -keystore ~/.android/debug.keystore -<span class="built_in">alias</span> androiddebugkey -storepass android -keypass android</div></pre></td></tr></table></figure>
<ul>
<li>在Windows系统中，在CMD中输入以下命令:</li>
</ul>
<figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keytool -list -v -keystore "<span class="variable">%USERPROFILE%</span>\.android\debug.keystore" -alias androiddebugkey -storepass android -keypass android</div></pre></td></tr></table></figure>
<p>回车执行之后，你将会看到类似下面的<code>debug.keystore</code>输出提示:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">别名: androiddebugkey</div><div class="line">创建日期: 2015-11-18</div><div class="line">条目类型: PrivateKeyEntry</div><div class="line">证书链长度: 1</div><div class="line">证书[1]:</div><div class="line">所有者: CN=Android Debug, O=Android, C=US</div><div class="line">发布者: CN=Android Debug, O=Android, C=US</div><div class="line">序列号: b15af1</div><div class="line">有效期开始日期: Wed Nov 18 07:18:45 CST 2015, 截止日期: Fri Nov 10 07:18:45 CST 2045</div><div class="line">证书指纹:</div><div class="line">         MD5: FE:A1:9C:02:71:A2:DA:F9:7F:1C:2B:61:D7:65:89:44</div><div class="line">         SHA1: 01:DF:58:7D:04:3E:76:B5:92:98:37:0E:DD:70:61:01:70:F5:C9:8E</div><div class="line">         SHA256: 84:18:44:C2:BD:AD:5D:A8:88:A1:96:EF:A6:27:86:0A:36:44:31:38:F2:5F:B6:4E:F1:10:EE:93:D6:22:CD:59</div><div class="line">         签名算法名称: SHA256withRSA</div><div class="line">         版本: 3</div><div class="line"></div><div class="line">扩展:</div></pre></td></tr></table></figure>
<p>我们将其中的证书指纹填入到第三方服务DEBUG配置中即可。当然了，有的时候出于这样或者那样的原因考虑，我们并不想使用系统默认的KeyStore或者就想自己生成一个新的KeyStore，Debug环境与Release环境都使用同一个来减少配置的麻烦。这个时候我们就需要创建一个新的KeyStore文件了。</p>
<h3 id="创建新的KeyStore"><a href="#创建新的KeyStore" class="headerlink" title="创建新的KeyStore"></a>创建新的KeyStore</h3><p>我们使用JDK自带的Keytool命令行工具即可完成KeyStore密钥库文件的创建，此处需要说明的是，Android Stduio中自带的图形化界面<code>KeyStore</code>生成工具生成的<code>.jks</code>文件与Keytool生成的<code>.keystore</code>文件在使用上没有任何区别。</p>
<h4 id="生成KeyStore"><a href="#生成KeyStore" class="headerlink" title="生成KeyStore"></a>生成KeyStore</h4><p>在终端中键入以下命令:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keytool -genkey -v -keystore &#123;FILENAME.keystore&#125; -<span class="built_in">alias</span> &#123;ALIAS&#125; -keyalg RSA -validity &#123;DURATION&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>{FILENAME.keystore}</code> 为生成的KeyStore的文件名</li>
<li><code>{ALIAS}</code> 为生成的KeyStore文件的别名</li>
<li><code>{DURATION}</code> 为该KeyStore文件的过期时间</li>
</ul>
<p>下面将以生成一个test.keystore文件为示例:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keytool -genkey -v -keystore test.keystore -<span class="built_in">alias</span> <span class="built_in">test</span> -keyalg RSA -validity 365</div></pre></td></tr></table></figure>
<p>键入以上命令将生成一个以RSA算法加密的有效期365天的名为<code>test.keystore</code>的文件，该KeyStore文件的alias为 test。回车确认执行该命令之后，将会要求输入密钥库口令以及一些基本的信息，根据提示输入无误之后将会在当前终端所在目录生成指定的KeyStore文件。完整的示例如下所示:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$ keytool -genkey -v -keystore test.keystore -<span class="built_in">alias</span> <span class="built_in">test</span> -keyalg RSA -validity 365</div><div class="line">输入密钥库口令:  android</div><div class="line">再次输入新口令: android</div><div class="line">您的名字与姓氏是什么?</div><div class="line">  [Unknown]:  Doublemine</div><div class="line">您的组织单位名称是什么?</div><div class="line">  [Unknown]:  Test</div><div class="line">您的组织名称是什么?</div><div class="line">  [Unknown]:  Test</div><div class="line">您所在的城市或区域名称是什么?</div><div class="line">  [Unknown]:  Test</div><div class="line">您所在的省/市/自治区名称是什么?</div><div class="line">  [Unknown]:  Test</div><div class="line">该单位的双字母国家/地区代码是什么?</div><div class="line">  [Unknown]:  Test</div><div class="line">CN=Doublemine, OU=Test, O=Test, L=Test, ST=Test, C=Test是否正确?</div><div class="line">  [否]:  y</div><div class="line"></div><div class="line">正在为以下对象生成 2,048 位RSA密钥对和自签名证书 (SHA256withRSA) (有效期为 365 天):</div><div class="line">         CN=Doublemine, OU=Test, O=Test, L=Test, ST=Test, C=Test</div><div class="line">输入 &lt;<span class="built_in">test</span>&gt; 的密钥口令</div><div class="line">        (如果和密钥库口令相同, 按回车):</div><div class="line">[正在存储test.keystore]</div></pre></td></tr></table></figure>
<p>这样我们就有了一个全新的KeyStore文件可以用于Android的App签名，有了KeyStore文件下一步当然就是获取我们生成的KeyStore文件的指纹信息咯~</p>
<h4 id="获取KeyStore指纹信息"><a href="#获取KeyStore指纹信息" class="headerlink" title="获取KeyStore指纹信息"></a>获取KeyStore指纹信息</h4><p>与获取默认的<code>debug.keystore</code>文件指纹信息类似，我们在终端中键入以下命令:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keytool -v -list -keystore test.keystore -<span class="built_in">alias</span> <span class="built_in">test</span> -keypass android -storepass android</div></pre></td></tr></table></figure>
<p>即可获取到我们生成的KeyStore指纹信息，有的同学已经看出来了，只要将上述命令中的几个参数替换下，即可查看任意KeyStore的指纹信息:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keytool -v -list -keystore &#123;FILENAME.keystore&#125; -<span class="built_in">alias</span> &#123;ALIAS&#125; -keypass &#123;KEYPASSWD&#125; -storepass &#123;STOREPASSWD&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>{FILENAME.keystore}</code>为keystore文件名</li>
<li><code>{ALIAS}</code>为KeyStore的别名</li>
<li><code>{KEYPASSWD}</code>为KeyStore的密钥口令</li>
<li><code>{STOREPASSWD}</code>为KeyStore的密钥库口令</li>
</ul>
<h3 id="应用KeyStore"><a href="#应用KeyStore" class="headerlink" title="应用KeyStore"></a>应用KeyStore</h3><p>前面我们忙活了大半天生成了KeyStore文件，并查看其指纹信息。但是如果我们不使用到我们的项目中，毕竟还是不会对我们的项目生效的~我们还需要在Gradle脚本中对其进行配置，我们的项目才会应用其KeyStore文件。</p>
<p>其中我们有两种较为普遍的方式在项目中配置我们的KeyStore文件，第一种比较简单粗暴，直接在gradle构建脚本中写入KeyStore信息,第二种则将KeyStore信息配置在一个单独的配置文件中，在gradle构建时动态读取。</p>
<h4 id="签名信息写入Gradle脚本"><a href="#签名信息写入Gradle脚本" class="headerlink" title="签名信息写入Gradle脚本"></a>签名信息写入Gradle脚本</h4><p>在Android Stduio中打开主moudle的<code>build.gradle</code>文件,在其中的<code>android</code>闭包中键入如下内容:</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">signingConfigs &#123;</div><div class="line">    release &#123;</div><div class="line">      keyAlias <span class="string">'test'</span></div><div class="line">      keyPassword <span class="string">'android'</span></div><div class="line">      storeFile <span class="keyword">file</span>(<span class="string">'./keystore/test.keystore'</span>)</div><div class="line">      storePassword <span class="string">'android'</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>其中声明的release闭包中包含了<code>keyAlias</code>、<code>keyPassword</code>、<code>storeFile</code>、<code>storePassword</code>四个Property。其中含义分别为:</p>
<ul>
<li><code>keyAlias</code> keystore的<code>alias</code></li>
<li><code>keyPassword</code> KeyStore的密钥口令</li>
<li><code>storeFile</code>为KeyStore的文件存放路径，可以为相对或者绝对路径，此处使用的为相对路径</li>
<li><code>storePassword</code>为KeyStore的密钥库口令</li>
</ul>
<p>以上的Gradle DSL将会作用于我们的项目的Release版本，当我们在终端中个输入:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradlew assembleRelease</div></pre></td></tr></table></figure>
<p>项目将会使用我们上面定义的<code>test.keystore</code>密钥库文件签名打包项目为Release发布版。</p>
<p>同样，如果我们不想使用默认的<code>debug.keystore</code>签名项目的Debug版本，我们亦可以重新生成一个KeyStore文件或者使用Release版本的签名该文件，放入debug闭包中即可:</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">signingConfigs &#123;</div><div class="line">    release &#123;</div><div class="line">      keyAlias <span class="string">'test'</span></div><div class="line">      keyPassword <span class="string">'android'</span></div><div class="line">      storeFile <span class="keyword">file</span>(<span class="string">'./keystore/test.keystore'</span>)</div><div class="line">      storePassword <span class="string">'android'</span></div><div class="line">    &#125;</div><div class="line">    debug &#123;</div><div class="line">     keyAlias <span class="string">'test'</span></div><div class="line">      keyPassword <span class="string">'android'</span></div><div class="line">      storeFile <span class="keyword">file</span>(<span class="string">'./keystore/test.keystore'</span>)</div><div class="line">      storePassword <span class="string">'android'</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h4 id="签名信息写入配置文件"><a href="#签名信息写入配置文件" class="headerlink" title="签名信息写入配置文件"></a>签名信息写入配置文件</h4><p>细心的同学可能发现了，虽然上面的把签名信息写入gradle脚本中比较方便省事，但是却在密钥文件的密钥密码泄露问题，任何能够看到此Moudle的build.gradle脚本的人都可以拿到KeyStore文件及其对应的密钥口令，可能会导致一些安全风险。因此在一些开源项目或者比较敏感的项目中，可能会存在类似的gradle配置:</p>
<p>在主moudle的build.gradle脚本的android闭包中:</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">applicationVariants.all &#123;  </div><div class="line">    <span class="keyword">if</span> (<span class="keyword">project</span>.hasProperty(<span class="string">'keyAlias'</span>) &amp;&amp; <span class="keyword">project</span>.hasProperty(<span class="string">'storeFile'</span>) &amp;&amp;</div><div class="line">    <span class="keyword">project</span>.hasProperty(<span class="string">'storePassword'</span>) &amp;&amp;</div><div class="line">    <span class="keyword">project</span>.hasProperty(<span class="string">'keyPassword'</span>)) &#123;</div><div class="line">  android.signingConfigs.release.keyAlias = keyAlias</div><div class="line">  android.signingConfigs.release.storeFile = <span class="keyword">file</span>(storeFile)</div><div class="line">  android.signingConfigs.release.storePassword = storePassword</div><div class="line">  android.signingConfigs.release.keyPassword = keyPassword</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  android.buildTypes.release.signingConfig = <span class="keyword">null</span></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中<code>Variants</code>翻译中文为<code>变种</code>,<code>applicationVariants.all</code>属性含义为<code>app plugin</code>下所有的<code>Variant</code>的配置信息，可以将其看作为一个总览，可以方便的访问所有对象。<br><a href="http://tools.android.com/tech-docs/new-build-system/user-guide" target="_blank" rel="external">相关延伸阅读Gradle Plugin User Guide</a>，我们在其中通过<code>project.hasProperty</code>读取项目中的配置，并将其动态的赋值给<code>signingConfigs.release</code>下的相关属性。</p>
<p>然后我们通过在<code>gradle.properties</code>或者其它项目中能够被gradle的文件中定义以上属性并赋值即可：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">storeFile=.<span class="regexp">/keystore/</span>test.keystore</div><div class="line">storePassword=android</div><div class="line">keyAlias=test</div><div class="line">keyPassword=android</div></pre></td></tr></table></figure>
<p>这样我们在项目团队协作时，将<code>gradle.properties</code>文件忽略即可。</p>
<p>Enjoy IT!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android应用开发的时候会经常使用到第三方SDK，例如地图、推送、支付以及分享等。而这些第三方服务SDK为了应用不被滥用都会有签名验证机制。我们通过上传Android应用的签名来在服务端配置以验证应用的合法性。本文将讲述下在Android Stduio中常用的签名操作。&lt;/p&gt;
&lt;h3 id=&quot;默认KeyStore&quot;&gt;&lt;a href=&quot;#默认KeyStore&quot; class=&quot;headerlink&quot; title=&quot;默认KeyStore&quot;&gt;&lt;/a&gt;默认KeyStore&lt;/h3&gt;&lt;h4 id=&quot;默认KeyStore存储路径&quot;&gt;&lt;a href=&quot;#默认KeyStore存储路径&quot; class=&quot;headerlink&quot; title=&quot;默认KeyStore存储路径&quot;&gt;&lt;/a&gt;默认KeyStore存储路径&lt;/h4&gt;&lt;p&gt;在Android Stduio中系统默认内置了一个签名文件&lt;code&gt;debug.keystore&lt;/code&gt;，用于我们在debug下的默认App签名。如果没有在Gradle文件中特殊指定，那么Android Studio将自动使用默认的&lt;code&gt;debug.keystore&lt;/code&gt;文件为项目App生成Debug版本的签名。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://notes.wanghao.work/categories/Android/"/>
    
    
      <category term="Android" scheme="https://notes.wanghao.work/tags/Android/"/>
    
      <category term="Android Studio" scheme="https://notes.wanghao.work/tags/Android-Studio/"/>
    
      <category term="KeyStore" scheme="https://notes.wanghao.work/tags/KeyStore/"/>
    
  </entry>
  
  <entry>
    <title>RxJava、Retrofit接收Error Response Body</title>
    <link href="https://notes.wanghao.work/2016-07-02-RxJava%E9%85%8D%E5%90%88Retofit%E6%8E%A5%E6%94%B6%E9%94%99%E8%AF%AFbody.html"/>
    <id>https://notes.wanghao.work/2016-07-02-RxJava配合Retofit接收错误body.html</id>
    <published>2016-07-02T14:10:53.000Z</published>
    <updated>2016-11-06T01:31:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>RxJava</code>配合<code>Retrofit</code>能够大大简化Android项目中的网络请求代码量，使得逻辑更清晰，当然也可能会遇到一些问题。下面给出一种问题的解决方案。</p>
<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>一个基本的RxJava配合Retrofit以及Lambda的网络调用看起来像这个样子的:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Subscription subscription = mApi.getSimpleApi()</div><div class="line">       .subscribeOn(Schedulers.io())</div><div class="line">       .observeOn(AndroidSchedulers.mainThread())</div><div class="line">       .subscribe(response -&gt; &#123;</div><div class="line"></div><div class="line">        <span class="comment">//do Something</span></div><div class="line"></div><div class="line">       &#125;, throwable -&gt; &#123;</div><div class="line"></div><div class="line">       <span class="comment">//Ops Error</span></div><div class="line"></div><div class="line">       &#125;);</div></pre></td></tr></table></figure>
<p>当<code>Retrofit</code>中的网络请求返回码状态码为<code>200</code>时，执行<code>do Something</code>中的逻辑处理正常的<br>业务流程，但是当服务器返回状态码为<code>非200</code>时，将会执行<code>Ops Error</code>中的业务流程而不会<br>执行<code>do Something</code>中的业务逻辑。</p>
<a id="more"></a>
<p>这样本没有什么问题，一般我们会在错误处理逻辑中在UI中给出错误提示，像这样:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Log.e(<span class="string">"Ops"</span>, <span class="string">"Error:"</span> + throwable.getMessage());</div></pre></td></tr></table></figure>
<p>但是这样的话我们只能获取到一服务器的错误响应码以及对应的简短的响应码错误说明，一般情况下我们服务器<br>都会包装错误信息为一个JSON，客户端解析错误信息必要的时候动态展示在UI上以提示用户。如果我们要拿到这样的JSON，使用<code>throwable.getMessage()</code>这样做显然是不行的。是不是使用RxJava配合Retrofit只能拿到这样的错误Throwable信息呢？</p>
<p>显然不是的，其实服务器返回的错误信息<code>非200</code>响应码的<code>Response Body</code>JSON对象包含在这个<code>throwable</code>对象中，我们可以这样将其解析出来:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">throwable -&gt; &#123;</div><div class="line">          <span class="keyword">if</span>(throwable <span class="keyword">instanceof</span> HttpException)&#123;</div><div class="line">            HttpException httpException= (HttpException) throwable;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">              String errorBody= httpException.response().errorBody().string();</div><div class="line"></div><div class="line">		<span class="comment">//<span class="doctag">TODO:</span> parse To JSON Obj</span></div><div class="line"></div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">              e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">	 <span class="comment">//Ops Print throwable</span></div><div class="line"></div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>在<code>Parse to JSON Obj</code>中将<code>errorBody</code>解析为JSON对象进行相应的处理即可。</p>
<p>然而，你不能让我每个地方都加上这样的一段代码吧，既然我们使用的是<code>RxJava</code>，我们可以让这种处理稍微看起来优雅点。以下以<code>Jackson</code>为例:</p>
<h4 id="自定义Action1"><a href="#自定义Action1" class="headerlink" title="自定义Action1"></a>自定义Action1</h4><p>由于<code>RxJava</code>的错误异常处理接受一个参数，并且没有返回值，因此我们可以定义一个<code>Action1</code>来替代默认的Error Action:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorAction</span> <span class="keyword">implements</span> <span class="title">Action1</span>&lt;<span class="title">Throwable</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Throwable throwable)</span> </span>&#123;</div><div class="line">    call(ErrorMessage.handle(throwable));</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(ErrorMessage error)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中<code>ErrorMessage</code>为我们定义好的错误消息Model:</p>
<h4 id="定义Throwable-Handle"><a href="#定义Throwable-Handle" class="headerlink" title="定义Throwable Handle"></a>定义Throwable Handle</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@JsonIgnoreProperties</span>(ignoreUnknown = <span class="keyword">true</span>) <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseError</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> ERROR_CODE_IO_ERROR = <span class="number">2072</span>;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> ERROR_CODE_UN_KNOW = <span class="number">2073</span>;</div><div class="line">  <span class="meta">@JsonProperty</span>(<span class="string">"status_code"</span>) <span class="keyword">public</span> <span class="keyword">int</span> statusCode;</div><div class="line">  <span class="keyword">public</span> String message;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatusCode</span><span class="params">(<span class="keyword">int</span> statusCode)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.statusCode = statusCode;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.message = message;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResponseError <span class="title">handle</span><span class="params">(Throwable throwable)</span> </span>&#123;</div><div class="line">    ResponseError responseError = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">if</span> (throwable <span class="keyword">instanceof</span> HttpException) &#123;</div><div class="line">      HttpException exception = (HttpException) throwable;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        responseError = <span class="keyword">new</span> ObjectMapper().readValue(exception.response().errorBody().string(),</div><div class="line">            ResponseError.class);</div><div class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">        responseError = <span class="keyword">new</span> ResponseError();</div><div class="line">        responseError.setMessage(e.getLocalizedMessage());</div><div class="line">        responseError.setStatusCode(ERROR_CODE_IO_ERROR);</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      responseError = <span class="keyword">new</span> ResponseError();</div><div class="line">      responseError.setMessage(throwable.getMessage());</div><div class="line">      responseError.setStatusCode(ERROR_CODE_UN_KNOW);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> responseError;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样，我们就完成了一个自定义<code>Action1</code>了，接下来我们便可以这样使用了:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Subscription subscription = mApi.getSimpleApi()</div><div class="line">        .subscribeOn(Schedulers.io())</div><div class="line">        .observeOn(AndroidSchedulers.mainThread())</div><div class="line">        .subscribe(response -&gt; &#123;</div><div class="line"></div><div class="line">         <span class="comment">//do Something</span></div><div class="line"></div><div class="line">        &#125;,  <span class="keyword">new</span> ErrorAction() &#123;</div><div class="line">              <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(ErrorMessage msg)</span> </span>&#123;</div><div class="line">			<span class="comment">//Do Error               </span></div><div class="line"></div><div class="line">              &#125;</div><div class="line">            &#125;);</div></pre></td></tr></table></figure>
<p>其中在<code>Do Error</code>中拿到<code>ErrorMessage</code>对象，进行相应的对象操作即可~</p>
<p>Enjoy IT!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;RxJava&lt;/code&gt;配合&lt;code&gt;Retrofit&lt;/code&gt;能够大大简化Android项目中的网络请求代码量，使得逻辑更清晰，当然也可能会遇到一些问题。下面给出一种问题的解决方案。&lt;/p&gt;
&lt;h3 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h3&gt;&lt;p&gt;一个基本的RxJava配合Retrofit以及Lambda的网络调用看起来像这个样子的:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Subscription subscription = mApi.getSimpleApi()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       .subscribeOn(Schedulers.io())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       .observeOn(AndroidSchedulers.mainThread())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       .subscribe(response -&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//do Something&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;#125;, throwable -&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;//Ops Error&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当&lt;code&gt;Retrofit&lt;/code&gt;中的网络请求返回码状态码为&lt;code&gt;200&lt;/code&gt;时，执行&lt;code&gt;do Something&lt;/code&gt;中的逻辑处理正常的&lt;br&gt;业务流程，但是当服务器返回状态码为&lt;code&gt;非200&lt;/code&gt;时，将会执行&lt;code&gt;Ops Error&lt;/code&gt;中的业务流程而不会&lt;br&gt;执行&lt;code&gt;do Something&lt;/code&gt;中的业务逻辑。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://notes.wanghao.work/categories/Android/"/>
    
    
      <category term="Android" scheme="https://notes.wanghao.work/tags/Android/"/>
    
      <category term="Android Studio" scheme="https://notes.wanghao.work/tags/Android-Studio/"/>
    
      <category term="RxJava" scheme="https://notes.wanghao.work/tags/RxJava/"/>
    
      <category term="Retrofit" scheme="https://notes.wanghao.work/tags/Retrofit/"/>
    
  </entry>
  
  <entry>
    <title>为NexT主题添加文章阅读量统计功能</title>
    <link href="https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html"/>
    <id>https://notes.wanghao.work/2015-10-21-为NexT主题添加文章阅读量统计功能.html</id>
    <published>2015-10-21T13:57:00.000Z</published>
    <updated>2017-06-14T15:28:50.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr>
<p>由于最近在折腾Android项目，需要用到一些与服务器交互、以及数据存储的相关功能，然后发现了<a href="https://leancloud.cn" target="_blank" rel="external">LeanCloud</a>这家服务提供商,使用下来还感觉还挺靠谱的(请给我广告费)。正好发现他们服务提供了<a href="https://leancloud.cn/docs/js_guide.html" target="_blank" rel="external">JavaScript SDK</a>，于是就想着尝试着实现Hexo博客文章的浏览数统计功能，之前虽然在使用不蒜子，但是不蒜子不能够在主页展示文章阅读量啊！对于博主这种有强迫症又想装X的人来说果断不能忍啊！</p>
<h3 id="修改NexT主题模版"><a href="#修改NexT主题模版" class="headerlink" title="修改NexT主题模版"></a><del>修改NexT主题模版</del></h3><p><del>本方法理论上对Hexo博客通用，由于博主使用的是NexT主题，所以当然针对NexT来说咯。</del><strong><font color="red">NexT主题目前已经合并这个Feature，因此如果你使用的是NexT主题，可以直接使用不用修改主题模版而直接在<code>_config.yml</code>中配置即可，请直接跳转查看<a href="#%E9%85%8D%E7%BD%AELeanCloud">配置LeanCloud</a></font></strong></p>
<a id="more"></a>
<h4 id="修改-config-yml文件"><a href="#修改-config-yml文件" class="headerlink" title="修改_config.yml文件"></a><del>修改<code>_config.yml</code>文件</del></h4><p><del>打开NexT主题的根目录下的<code>_config.yml</code>文件，在任意位置添加以下内容：</del></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">leancloud_visitors:</div><div class="line">  enable: <span class="literal">true</span></div><div class="line">  app_id: #&lt;AppID&gt;</div><div class="line">  app_key: #&lt;AppKEY&gt;</div></pre></td></tr></table></figure>
<h4 id="添加lean-analytics-swig文件"><a href="#添加lean-analytics-swig文件" class="headerlink" title="添加lean-analytics.swig文件"></a><del>添加<code>lean-analytics.swig</code>文件</del></h4><p><del>在主题的<code>layout\_scripts</code>路径下，新建一个<code>lean-analytics.swig</code>文件，并向里面添加以下内容</del></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">&lt;!-- custom analytics part create by xiamo --&gt;</div><div class="line">&lt;script src=<span class="string">"https://cdn1.lncld.net/static/js/av-core-mini-0.6.1.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script&gt;AV.initialize(<span class="string">"&#123;&#123;theme.leancloud_visitors.app_id&#125;&#125;"</span>, <span class="string">"&#123;&#123;theme.leancloud_visitors.app_key&#125;&#125;"</span>);<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script&gt;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">showTime</span>(<span class="params">Counter</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> query = <span class="keyword">new</span> AV.Query(Counter);</div><div class="line">	$(<span class="string">".leancloud_visitors"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> url = $(<span class="keyword">this</span>).attr(<span class="string">"id"</span>).trim();</div><div class="line">		query.equalTo(<span class="string">"url"</span>, url);</div><div class="line">		query.find(&#123;</div><div class="line">			success: <span class="function"><span class="keyword">function</span>(<span class="params">results</span>) </span>&#123;</div><div class="line">				<span class="keyword">if</span> (results.length == <span class="number">0</span>) &#123;</div><div class="line">					<span class="keyword">var</span> content = $(<span class="built_in">document</span>.getElementById(url)).text() + <span class="string">': 0'</span>;</div><div class="line">					$(<span class="built_in">document</span>.getElementById(url)).text(content);</div><div class="line">					<span class="keyword">return</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; results.length; i++) &#123;</div><div class="line">					<span class="keyword">var</span> object = results[i];</div><div class="line">					<span class="keyword">var</span> content = $(<span class="built_in">document</span>.getElementById(url)).text() + <span class="string">': '</span> + object.get(<span class="string">'time'</span>);</div><div class="line">					$(<span class="built_in">document</span>.getElementById(url)).text(content);</div><div class="line">				&#125;</div><div class="line">			&#125;,</div><div class="line">			error: <span class="function"><span class="keyword">function</span>(<span class="params">object, error</span>) </span>&#123;</div><div class="line">				<span class="built_in">console</span>.log(<span class="string">"Error: "</span> + error.code + <span class="string">" "</span> + error.message);</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line"></div><div class="line">	&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addCount</span>(<span class="params">Counter</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> Counter = AV.Object.extend(<span class="string">"Counter"</span>);</div><div class="line">	url = $(<span class="string">".leancloud_visitors"</span>).attr(<span class="string">'id'</span>).trim();</div><div class="line">	title = $(<span class="string">".leancloud_visitors"</span>).attr(<span class="string">'data-flag-title'</span>).trim();</div><div class="line">	<span class="keyword">var</span> query = <span class="keyword">new</span> AV.Query(Counter);</div><div class="line">	query.equalTo(<span class="string">"url"</span>, url);</div><div class="line">	query.find(&#123;</div><div class="line">		success: <span class="function"><span class="keyword">function</span>(<span class="params">results</span>) </span>&#123;</div><div class="line">			<span class="keyword">if</span> (results.length &gt; <span class="number">0</span>) &#123;</div><div class="line">				<span class="keyword">var</span> counter = results[<span class="number">0</span>];</div><div class="line">				counter.fetchWhenSave(<span class="literal">true</span>);</div><div class="line">				counter.increment(<span class="string">"time"</span>);</div><div class="line">				counter.save(<span class="literal">null</span>, &#123;</div><div class="line">					success: <span class="function"><span class="keyword">function</span>(<span class="params">counter</span>) </span>&#123;</div><div class="line">						<span class="keyword">var</span> content = $(<span class="built_in">document</span>.getElementById(url)).text() + <span class="string">': '</span> + counter.get(<span class="string">'time'</span>);</div><div class="line">						$(<span class="built_in">document</span>.getElementById(url)).text(content);</div><div class="line">					&#125;,</div><div class="line">					error: <span class="function"><span class="keyword">function</span>(<span class="params">counter, error</span>) </span>&#123;</div><div class="line">						<span class="built_in">console</span>.log(<span class="string">'Failed to save Visitor num, with error message: '</span> + error.message);</div><div class="line">					&#125;</div><div class="line">				&#125;);</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">var</span> newcounter = <span class="keyword">new</span> Counter();</div><div class="line">				newcounter.set(<span class="string">"title"</span>, title);</div><div class="line">				newcounter.set(<span class="string">"url"</span>, url);</div><div class="line">				newcounter.set(<span class="string">"time"</span>, <span class="number">1</span>);</div><div class="line">				newcounter.save(<span class="literal">null</span>, &#123;</div><div class="line">					success: <span class="function"><span class="keyword">function</span>(<span class="params">newcounter</span>) </span>&#123;</div><div class="line">					    <span class="built_in">console</span>.log(<span class="string">"newcounter.get('time')="</span>+newcounter.get(<span class="string">'time'</span>));</div><div class="line">						<span class="keyword">var</span> content = $(<span class="built_in">document</span>.getElementById(url)).text() + <span class="string">': '</span> + newcounter.get(<span class="string">'time'</span>);</div><div class="line">						$(<span class="built_in">document</span>.getElementById(url)).text(content);</div><div class="line">					&#125;,</div><div class="line">					error: <span class="function"><span class="keyword">function</span>(<span class="params">newcounter, error</span>) </span>&#123;</div><div class="line">						<span class="built_in">console</span>.log(<span class="string">'Failed to create'</span>);</div><div class="line">					&#125;</div><div class="line">				&#125;);</div><div class="line">			&#125;</div><div class="line">		&#125;,</div><div class="line">		error: <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</div><div class="line">			<span class="built_in">console</span>.log(<span class="string">'Error:'</span> + error.code + <span class="string">" "</span> + error.message);</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">&#125;</div><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> Counter = AV.Object.extend(<span class="string">"Counter"</span>);</div><div class="line">	<span class="keyword">if</span> ($(<span class="string">'.leancloud_visitors'</span>).length == <span class="number">1</span>) &#123;</div><div class="line">		addCount(Counter);</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> ($(<span class="string">'.post-title-link'</span>).length &gt; <span class="number">1</span>) &#123;</div><div class="line">		showTime(Counter);</div><div class="line">	&#125;</div><div class="line">&#125;);</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h4 id="修改post-swig文件"><a href="#修改post-swig文件" class="headerlink" title="修改post.swig文件"></a><del>修改<code>post.swig</code>文件</del></h4><p><del>在主题的<code>layout\_macro</code>路径下，打开<code>post.swig</code>文件，找到以下内容（大概88行）：</del></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;% if not is_index and theme.facebook_sdk.enable and theme.facebook_sdk.like_button %&#125;</div><div class="line">  &amp;nbsp; | &amp;nbsp;</div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fb-like"</span> <span class="attr">data-layout</span>=<span class="string">"button_count"</span> <span class="attr">data-share</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">&#123;% endif %&#125;</div></pre></td></tr></table></figure>
<p><del>在其后面添加如下内容：</del></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;% if theme.leancloud_visitors.enable %&#125;</div><div class="line">		  	 <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"&#123;&#123; url_for(post.path) &#125;&#125;"</span><span class="attr">class</span>=<span class="string">"leancloud_visitors"</span>  <span class="attr">data-flag-title</span>=<span class="string">"&#123;&#123; post.title &#125;&#125;"</span>&gt;</span></div><div class="line">            &amp;nbsp; | &amp;nbsp; &#123;&#123;__('post.visitors')&#125;&#125;</div><div class="line">            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		  &#123;% endif %&#125;</div></pre></td></tr></table></figure>
<p><del>添加完毕之后，文件内容像这个样子：</del></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">      &#123;% if not is_index and theme.facebook_sdk.enable and theme.facebook_sdk.like_button %&#125;</div><div class="line">        &amp;nbsp; | &amp;nbsp;</div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fb-like"</span> <span class="attr">data-layout</span>=<span class="string">"button_count"</span> <span class="attr">data-share</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      &#123;% endif %&#125;</div><div class="line">&#123;% if theme.leancloud_visitors.enable %&#125;</div><div class="line">	 <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"&#123;&#123; url_for(post.path) &#125;&#125;"</span><span class="attr">class</span>=<span class="string">"leancloud_visitors"</span>  <span class="attr">data-flag-title</span>=<span class="string">"&#123;&#123; post.title &#125;&#125;"</span>&gt;</span></div><div class="line">        &amp;nbsp; | &amp;nbsp; &#123;&#123;__('post.visitors')&#125;&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">&#123;% endif %&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line">&#123;% endif %&#125;</div></pre></td></tr></table></figure>
<h4 id="修改layout-swig文件"><a href="#修改layout-swig文件" class="headerlink" title="修改layout.swig文件"></a><del>修改<code>layout.swig</code>文件</del></h4><p><del>在NexT根目录的<code>layout</code>路径下，打开 <code>_layout.swig</code>文件，在<code>&lt;/body&gt;</code>上方添加如下内容：</del><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% if theme.leancloud_visitors.enable %&#125;</div><div class="line">  	 &#123;% include '_scripts/lean-analytics.swig' %&#125;</div><div class="line">  &#123;%  endif %&#125;</div></pre></td></tr></table></figure></p>
<p><del>添加完成之后，文件内容像这个样子：</del></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;# LazyLoad #&#125;</div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; url_for(theme.js) &#125;&#125;/lazyload.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">      $(<span class="string">"#posts"</span>).find(<span class="string">'img'</span>).lazyload(&#123;</span></div><div class="line"><span class="javascript">        placeholder: <span class="string">"&#123;&#123; url_for(theme.images) &#125;&#125;/loading.gif"</span>,</span></div><div class="line"><span class="javascript">        effect: <span class="string">"fadeIn"</span></span></div><div class="line"><span class="undefined">      &#125;);</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  &#123;% if theme.leancloud_visitors.enable %&#125;</div><div class="line">  	 &#123;% include '_scripts/lean-analytics.swig' %&#125;</div><div class="line">  &#123;%  endif %&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="修改zh-Hans-yml文件"><a href="#修改zh-Hans-yml文件" class="headerlink" title="修改zh-Hans.yml文件"></a><del>修改<code>zh-Hans.yml</code>文件</del></h4><p><del>在NexT目录的<code>languages</code>路径下的<code>zh-Hans.yml</code>文件，在<code>post:</code>结点下添加<code>visitors: 阅读次数</code>，像这个样子：</del><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">post:</div><div class="line">  posted: 发表于</div><div class="line">  visitors: 阅读次数</div><div class="line">  updated: 更新于</div><div class="line">  in: 分类于</div><div class="line">  read_more: 阅读全文</div><div class="line">  untitled: 未命名</div><div class="line">  toc_empty: 此文章未包含目录</div></pre></td></tr></table></figure></p>
<p><del><strong> 如果你使用的是其它NexT的语言，请相应的添加该字段即可。</strong></del></p>
<p><del>至此NexT的修改工作就完成了，但是现在还是不能够使用文章阅读量这个统计功能的。这个功能依赖于<a href="https://leancloud.cn/" target="_blank" rel="external">LeanCloud</a>提供后端数据存取，因此我们需要注册一个<a href="https://leancloud.cn/login.html#/signup" target="_blank" rel="external">LeanCloud帐号</a>才能继续使用这个功能，<strong><a href="https://leancloud.cn/login.html#/signup" target="_blank" rel="external">点我快速注册</a>.</strong></del></p>
<hr>
<h3 id="配置LeanCloud"><a href="#配置LeanCloud" class="headerlink" title="配置LeanCloud"></a>配置<a href="https://leancloud.cn" target="_blank" rel="external">LeanCloud</a></h3><p>在注册完成LeanCloud帐号并验证邮箱之后，我们就可以登录我们的LeanCloud帐号，进行一番配置之后拿到<code>AppID</code>以及<code>AppKey</code>这两个参数即可正常使用文章阅读量统计的功能了。</p>
<h4 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h4><ul>
<li>我们新建一个应用来专门进行博客的访问统计的数据操作。首先，打开控制台，如下图所示：</li>
</ul>
<p><img src="http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/open_consoloe.png" alt="" title="打开控制台"></p>
<ul>
<li>在出现的界面点击<code>创建应用</code>：</li>
</ul>
<p><img src="http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/create_app.png" alt="" title="创建应用"></p>
<ul>
<li>在接下来的页面，新建的应用名称我们可以随意输入，即便是输入的不满意我们后续也是可以更改的:</li>
</ul>
<p><img src="http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/creating_app.png" alt="" title="创建的新应用名称"></p>
<ul>
<li>这里为了演示的方便，我新创建一个取名为test的应用。创建完成之后我们点击新创建的应用的名字来进行该应用的参数配置：</li>
</ul>
<p><img src="http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/create_class.png" alt="" title="打开应用参数配置界面"></p>
<ul>
<li>在应用的数据配置界面，左侧下划线开头的都是系统预定义好的表，为了便于区分我们新建一张表来保存我们的数据。点击左侧右上角的齿轮图标，新建Class：<br> 在弹出的选项中选择<code>创建Class</code>来新建Class用来专门保存我们博客的文章访问量等数据:<br> 点击<code>创建Class</code>之后，<del>理论上来说名字可以随意取名，只要你交互代码做相应的更改即可</del>，但是为了保证我们前面对NexT主题的修改兼容，此处的<strong><font color="green">新建Class名字必须为<font color="red"><code>Counter</code></font></font></strong>:</li>
</ul>
<p><img src="http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/creating_class.png" alt="" title="权限配置"></p>
<ul>
<li>由于LeanCloud升级了默认的ACL权限，如果你想避免后续因为权限的问题导致次数统计显示不正常，建议在此处选择<code>无限制</code>。</li>
</ul>
<p><img src="http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/open_app_key.png" alt="" title="打开应用设置"></p>
<p>创建完成之后，左侧数据栏应该会多出一栏名为<code>Counter</code>的栏目，这个时候我们点击顶部的设置，切换到test应用的操作界面:<br>在弹出的界面中，选择左侧的<code>应用Key</code>选项，即可发现我们创建应用的<code>AppID</code>以及<code>AppKey</code>，有了它，我们就有权限能够通过主题中配置好的Javascript代码与这个应用的Counter表进行数据存取操作了:</p>
<p><img src="http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/opened_app_key.png" alt="" title="获取Appid、Appkey"></p>
<p>复制<code>AppID</code>以及<code>AppKey</code>并在NexT主题的<code>_config.yml</code>文件中我们相应的位置填入即可，正确配置之后文件内容像这个样子:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">leancloud_visitors:</div><div class="line">  enable: true</div><div class="line">  app_id: joaeuuc4hsqudUUwx4gIvGF6-gzGzoHsz</div><div class="line">  app_key: E9UJsJpw1omCHuS22PdSpKoh</div></pre></td></tr></table></figure>
<p>这个时候重新生成部署Hexo博客，应该就可以正常使用文章阅读量统计的功能了。需要特别说明的是：记录文章访问量的唯一标识符是文章的<code>发布日期</code>以及<code>文章的标题</code>，因此请确保这两个数值组合的唯一性，如果你更改了这两个数值，会造成文章阅读数值的清零重计。</p>
<h3 id="后台管理"><a href="#后台管理" class="headerlink" title="后台管理"></a>后台管理</h3><p>当你配置部分完成之后，初始的文章统计量显示为0，但是这个时候我们LeanCloud对应的应用的<code>Counter</code>表中并没有相应的记录，只是单纯的显示为0而已，当博客文章在配置好阅读量统计服务之后第一次打开时，便会自动向服务器发送数据来创建一条数据，该数据会被记录在对应的应用的<code>Counter</code>表中。</p>
<p><img src="http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/background.png" alt="" title="后台管理"></p>
<p>我们可以修改其中的<code>time</code>字段的数值来达到修改某一篇文章的访问量的目的（博客文章访问量快递提升人气的装逼利器）。双击具体的数值，修改之后回车即可保存。</p>
<ul>
<li><code>url</code>字段被当作唯一<code>ID</code>来使用，因此如果你不知道带来的后果的话请不要修改。</li>
<li><code>title</code>字段显示的是博客文章的标题，用于后台管理的时候区分文章之用，没有什么实际作用。</li>
<li>其他字段皆为自动生成，具体作用请查阅LeanCloud官方文档，如果你不知道有什么作用请不要随意修改。</li>
</ul>
<h3 id="Web安全"><a href="#Web安全" class="headerlink" title="Web安全"></a>Web安全</h3><p>因为AppID以及AppKey是暴露在外的，因此如果一些别用用心之人知道了之后用于其它目的是得不偿失的，为了确保只用于我们自己的博客，建议开启Web安全选项，这样就只能通过我们自己的域名才有权访问后台的数据了，可以进一步提升安全性。</p>
<p>选择应用的设置的<code>安全中心</code>选项卡:</p>
<p><img src="http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/open_safe_center.png" alt="" title="进入安全中心"></p>
<p>在<code>Web 安全域名</code>中填入我们自己的博客域名，来确保数据调用的安全:</p>
<p><img src="http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/bind_domain.png" alt="" title="锁定域名"></p>
<p>如果你不知道怎么填写安全域名而或者填写完成之后发现博客文章访问量显示不正常，打开浏览器调试模式，发现如下图的输出:</p>
<p><img src="http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/broswer_403.png" alt="" title="Web安全域名填写错误"></p>
<p>这说明你的安全域名填写错误，导致服务器拒绝了数据交互的请求，你可以更改为正确的安全域名或者你不知道如何修改请在本博文中留言或者放弃设置Web安全域名。</p>
<p>Enjoy it！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;由于最近在折腾Android项目，需要用到一些与服务器交互、以及数据存储的相关功能，然后发现了&lt;a href=&quot;https://leancloud.cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LeanCloud&lt;/a&gt;这家服务提供商,使用下来还感觉还挺靠谱的(请给我广告费)。正好发现他们服务提供了&lt;a href=&quot;https://leancloud.cn/docs/js_guide.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript SDK&lt;/a&gt;，于是就想着尝试着实现Hexo博客文章的浏览数统计功能，之前虽然在使用不蒜子，但是不蒜子不能够在主页展示文章阅读量啊！对于博主这种有强迫症又想装X的人来说果断不能忍啊！&lt;/p&gt;
&lt;h3 id=&quot;修改NexT主题模版&quot;&gt;&lt;a href=&quot;#修改NexT主题模版&quot; class=&quot;headerlink&quot; title=&quot;修改NexT主题模版&quot;&gt;&lt;/a&gt;&lt;del&gt;修改NexT主题模版&lt;/del&gt;&lt;/h3&gt;&lt;p&gt;&lt;del&gt;本方法理论上对Hexo博客通用，由于博主使用的是NexT主题，所以当然针对NexT来说咯。&lt;/del&gt;&lt;strong&gt;&lt;font color=&quot;red&quot;&gt;NexT主题目前已经合并这个Feature，因此如果你使用的是NexT主题，可以直接使用不用修改主题模版而直接在&lt;code&gt;_config.yml&lt;/code&gt;中配置即可，请直接跳转查看&lt;a href=&quot;#%E9%85%8D%E7%BD%AELeanCloud&quot;&gt;配置LeanCloud&lt;/a&gt;&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://notes.wanghao.work/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://notes.wanghao.work/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Create a Simple Android Keyboard</title>
    <link href="https://notes.wanghao.work/2015-09-04-Create-a-Simple-Android-Keyboard.html"/>
    <id>https://notes.wanghao.work/2015-09-04-Create-a-Simple-Android-Keyboard.html</id>
    <published>2015-09-04T07:12:11.000Z</published>
    <updated>2017-06-14T15:36:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;由于最近做的一个Android项目需要用到用户的输入一些字符，常规的输入法输入非常的不方便。因此有必要自定义一个输入法来完成这个过程。此处给出一个简单的输入法Demo<br>来帮助理解自定义输入法的一些实现过程。</p>
<ul>
<li><strong>有关输入法的一些说明，请参见:<a href="http://notes.xiamo.tk/2015-04-01-Create-an-Android-IME.html" target="_blank" rel="external">Create a Android IME</a></strong></li>
</ul>
<a id="more"></a>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>&emsp;&emsp;磨刀不误砍柴工，创建一个Android是需要一点点准备工作的,选择一个好的IDE能够提高我们编码的效率：</p>
<ul>
<li>Android Studio（推荐）</li>
<li>Android SDK</li>
</ul>
<p>本博文的编写环境为Android Studio，如果你还在使用Eclipse的话，转到Android Studio上来吧！如果对上述IDE的下载感到茫然的话，推荐一个国内Android开发的好网站：<a href="http://www.androiddevtools.cn/" target="_blank" rel="external">http://www.androiddevtools.cn</a>。</p>
<h2 id="创建一个Android项目"><a href="#创建一个Android项目" class="headerlink" title="创建一个Android项目"></a>创建一个Android项目</h2><ul>
<li>打开Android Studio，创建一个新的Android项目，命名为<code>SimpleKeyboard</code>，如下图：</li>
</ul>
<p><img src="http://i3.piimg.com/37ae2bfdf945c18e.png" alt="" title="创建一个SimpleKeyboard项目"></p>
<ul>
<li>最小的Android支持版本我们在这里选择API 9也就是Android 2.3咯：</li>
</ul>
<p><img src="http://i3.piimg.com/f337c436d68dcc22.png" alt="" title="设置最小SDK支持版本"></p>
<ul>
<li>由于我们只是一个单独的键盘Demo，为了达到极致精简，还是不需要Activity了，因此我们选择<code>Add No Activity</code>：</li>
</ul>
<p><img src="http://i3.piimg.com/fed92e215ec17e4f.png" alt="" title="选择Add No Activity"></p>
<p>点击Finish，这样就完成了我们Android Keyboard项目的创建了。这个等待Gradle构建完成，因为我们这个项目是没有Activity的，因此我们需要按照如下图稍微配置一下：</p>
<p><img src="http://i3.piimg.com/4c72f6d152c54dee.png" alt=""></p>
<p><img src="http://i3.piimg.com/2195d3987d5dddd1.png" alt=""></p>
<h2 id="编辑AndroidManifest-xml文件"><a href="#编辑AndroidManifest-xml文件" class="headerlink" title="编辑AndroidManifest.xml文件"></a>编辑AndroidManifest.xml文件</h2><p>&emsp;&emsp;键盘在Android系统中被识别为一个输入法编辑器（IME），IME作为一个Service运行。只有在AndroidManifest.xml文件中通过<code>android.permission.BIND_INPUT_METHOD</code>权限声明的Service并且响应<code>android.view.im</code>这个元数据动作才能够被Android系统正确的识别为IME。因此，我们在<code>AndroidManifest.xml</code>文件中的application标签对中添加如下代码：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">service</span></span></div><div class="line"><span class="tag">          <span class="attr">android:name</span>=<span class="string">".SimpleIME"</span></span></div><div class="line"><span class="tag">          <span class="attr">android:label</span>=<span class="string">"@string/custom_ime"</span></span></div><div class="line"><span class="tag">          <span class="attr">android:permission</span>=<span class="string">"android.permission.BIND_INPUT_METHOD"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">meta-data</span></span></div><div class="line"><span class="tag">              <span class="attr">android:name</span>=<span class="string">"android.view.im"</span></span></div><div class="line"><span class="tag">              <span class="attr">android:resource</span>=<span class="string">"@xml/method"</span> /&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.view.InputMethod"</span> /&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">service</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="创建method-xml"><a href="#创建method-xml" class="headerlink" title="创建method.xml"></a>创建method.xml</h2><blockquote>
<p>&emsp;&emsp;在上面的Service声明中，meta-data标签声明引用了一个叫做<code>method.xml</code>的文件，如果没有这个文件，那么Android系统将不能够识别我们的Service为一个有效的IME Service。这个文件包含了有关输入法及其子类的详细信息。</p>
</blockquote>
<p>在我们的Demo中，我们定义一个<code>subtyoe</code>来声明输入法的显示名称以及其语言环境：（如果没有res/xml目录的话，创建一个并将下面的内容添加到该目录的method.xml文件中）</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">input-method</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">subtype</span></span></div><div class="line"><span class="tag">        <span class="attr">android:imeSubtypeLocale</span>=<span class="string">"zh_CN"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:imeSubtypeMode</span>=<span class="string">"keyboard"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"tk_xiamo_notes"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">input-method</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如果你对label中直接写死字符串这种做法比较有强迫症的话，可以将其抽取到Strings.xml文件中。</p>
<h2 id="定义键盘布局"><a href="#定义键盘布局" class="headerlink" title="定义键盘布局"></a>定义键盘布局</h2><p>&emsp;&emsp;我们的键盘布局比较简单，仅仅包含了一个KeyboardView，因此在<code>layout</code>目录中创建一个<code>keyboard.xml</code>文件，并添加一下内容：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">android.inputmethodservice.KeyboardView</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/keyboard"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_alignParentBottom</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:keyPreviewLayout</span>=<span class="string">"@layout/preview"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>其中需要说明的是：</p>
<ul>
<li><code>layout_alignParentBottom</code>属性设置为<code>true</code>来保证键盘会在设备屏幕的底端弹出而不是在其它什么地方弹出。</li>
<li><code>keyPreviewLayout</code>属性用于按下按键时暂短的按键预览。这里我们由于图方便省事，就用一个TextView来预览吧~</li>
</ul>
<p>在<code>layout</code>目录下创建一个preview.xml文件，并在其中添加如下内容：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">TextView</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">"#A6A6A6"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:textStyle</span>=<span class="string">"bold"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:textSize</span>=<span class="string">"30sp"</span></span></div><div class="line"><span class="tag">    &gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">TextView</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="定义键盘按键"><a href="#定义键盘按键" class="headerlink" title="定义键盘按键"></a>定义键盘按键</h2><blockquote>
<p>键盘按键所代表的键值以及其位置等详细信息都被指定在一个xml文件中，每个独立的键盘按键至少都必须包含一下两个属性：</p>
</blockquote>
<table>
<thead>
<tr>
<th>属性名</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>keyLabel</td>
<td>决定这个按键上显示的字符信息</td>
</tr>
<tr>
<td>codes</td>
<td>决定这个按键的对应的字符信息所代表的键值</td>
</tr>
</tbody>
</table>
<p><strong>例如：定义一个字母A的按键那么它的<code>codes</code>属性值应该为：97，<code>keyLabel</code>属性值应该为A。</strong></p>
<p>如果一个按键关联了多个键值，那么点击该按键输出的字符依赖于敲击该按键的次数。</p>
<p><strong>例如：如果一个按键拥有三个键值：63、33、58:</strong></p>
<table>
<thead>
<tr>
<th>敲击该按键的次数</th>
<th>输出的字符</th>
</tr>
</thead>
<tbody>
<tr>
<td>1次</td>
<td>?</td>
</tr>
<tr>
<td>2次</td>
<td>!</td>
</tr>
<tr>
<td>3次</td>
<td>:</td>
</tr>
</tbody>
</table>
<p>当然了，除了上述属性之外，一个按键还有一些其他的属性：</p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>keyEdgeFlags</td>
<td>可以设置的值有：right或者left，该属性通常用在一行最左边或者最右边的按键上用于表示按键的排布</td>
</tr>
<tr>
<td>keyWidth</td>
<td>定义一个按键的宽度，通常该宽度值被定义为一个百分比值</td>
</tr>
<tr>
<td>isRepeatable</td>
<td>如果这个属性被设置为true的话，长按被设置为该属性的按键将会在长按这段时间中多次重复该按键的动作。通过，在删除键或者空格键中设置该属性为true</td>
</tr>
</tbody>
</table>
<p>键盘上的按键通过Row标识为一组按键，比较推荐的做法是限制每组中最多10枚按键，这样的话，每个按键的宽度等于键盘宽度的10%。在本Demo中，按键高度被设置为60dp，这个数值可以任意调整。但是推荐不要低于48dp。</p>
<p>在<code>res/xml</code>目录中，创建一个<code>qwerty.xml</code>文件，并添加以下内容完成按键的定义：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">Keyboard</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:horizontalGap</span>=<span class="string">"0px"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:keyHeight</span>=<span class="string">"60dp"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:keyWidth</span>=<span class="string">"10%p"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:verticalGap</span>=<span class="string">"0px"</span></span></div><div class="line"><span class="tag">    &gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Row</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Key</span></span></div><div class="line"><span class="tag">            <span class="attr">android:codes</span>=<span class="string">"49"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyEdgeFlags</span>=<span class="string">"left"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyLabel</span>=<span class="string">"1"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Key</span></span></div><div class="line"><span class="tag">            <span class="attr">android:codes</span>=<span class="string">"50"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyLabel</span>=<span class="string">"2"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Key</span></span></div><div class="line"><span class="tag">            <span class="attr">android:codes</span>=<span class="string">"51"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyLabel</span>=<span class="string">"3"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Key</span></span></div><div class="line"><span class="tag">            <span class="attr">android:codes</span>=<span class="string">"52"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyLabel</span>=<span class="string">"4"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Key</span></span></div><div class="line"><span class="tag">            <span class="attr">android:codes</span>=<span class="string">"53"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyLabel</span>=<span class="string">"5"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Key</span></span></div><div class="line"><span class="tag">            <span class="attr">android:codes</span>=<span class="string">"54"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyLabel</span>=<span class="string">"6"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Key</span></span></div><div class="line"><span class="tag">            <span class="attr">android:codes</span>=<span class="string">"55"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyLabel</span>=<span class="string">"7"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Key</span></span></div><div class="line"><span class="tag">            <span class="attr">android:codes</span>=<span class="string">"56"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyLabel</span>=<span class="string">"8"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Key</span></span></div><div class="line"><span class="tag">            <span class="attr">android:codes</span>=<span class="string">"57"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyLabel</span>=<span class="string">"9"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Key</span></span></div><div class="line"><span class="tag">            <span class="attr">android:codes</span>=<span class="string">"48"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyEdgeFlags</span>=<span class="string">"right"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyLabel</span>=<span class="string">"0"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">Row</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Row</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Key</span></span></div><div class="line"><span class="tag">            <span class="attr">android:codes</span>=<span class="string">"113"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyEdgeFlags</span>=<span class="string">"left"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyLabel</span>=<span class="string">"q"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Key</span></span></div><div class="line"><span class="tag">            <span class="attr">android:codes</span>=<span class="string">"119"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyLabel</span>=<span class="string">"w"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Key</span></span></div><div class="line"><span class="tag">            <span class="attr">android:codes</span>=<span class="string">"101"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyLabel</span>=<span class="string">"e"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Key</span></span></div><div class="line"><span class="tag">            <span class="attr">android:codes</span>=<span class="string">"114"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyLabel</span>=<span class="string">"r"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Key</span></span></div><div class="line"><span class="tag">            <span class="attr">android:codes</span>=<span class="string">"116"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyLabel</span>=<span class="string">"t"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Key</span></span></div><div class="line"><span class="tag">            <span class="attr">android:codes</span>=<span class="string">"121"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyLabel</span>=<span class="string">"y"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Key</span></span></div><div class="line"><span class="tag">            <span class="attr">android:codes</span>=<span class="string">"117"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyLabel</span>=<span class="string">"u"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Key</span></span></div><div class="line"><span class="tag">            <span class="attr">android:codes</span>=<span class="string">"105"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyLabel</span>=<span class="string">"i"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Key</span></span></div><div class="line"><span class="tag">            <span class="attr">android:codes</span>=<span class="string">"111"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyLabel</span>=<span class="string">"o"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Key</span></span></div><div class="line"><span class="tag">            <span class="attr">android:codes</span>=<span class="string">"112"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyEdgeFlags</span>=<span class="string">"right"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyLabel</span>=<span class="string">"p"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">Row</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Row</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Key</span></span></div><div class="line"><span class="tag">            <span class="attr">android:codes</span>=<span class="string">"97"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyEdgeFlags</span>=<span class="string">"left"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyLabel</span>=<span class="string">"a"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Key</span></span></div><div class="line"><span class="tag">            <span class="attr">android:codes</span>=<span class="string">"115"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyLabel</span>=<span class="string">"s"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Key</span></span></div><div class="line"><span class="tag">            <span class="attr">android:codes</span>=<span class="string">"100"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyLabel</span>=<span class="string">"d"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Key</span></span></div><div class="line"><span class="tag">            <span class="attr">android:codes</span>=<span class="string">"102"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyLabel</span>=<span class="string">"f"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Key</span></span></div><div class="line"><span class="tag">            <span class="attr">android:codes</span>=<span class="string">"103"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyLabel</span>=<span class="string">"g"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Key</span></span></div><div class="line"><span class="tag">            <span class="attr">android:codes</span>=<span class="string">"104"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyLabel</span>=<span class="string">"h"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Key</span></span></div><div class="line"><span class="tag">            <span class="attr">android:codes</span>=<span class="string">"106"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyLabel</span>=<span class="string">"j"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Key</span></span></div><div class="line"><span class="tag">            <span class="attr">android:codes</span>=<span class="string">"107"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyLabel</span>=<span class="string">"k"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Key</span></span></div><div class="line"><span class="tag">            <span class="attr">android:codes</span>=<span class="string">"108"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyLabel</span>=<span class="string">"l"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Key</span></span></div><div class="line"><span class="tag">            <span class="attr">android:codes</span>=<span class="string">"35,64"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyEdgeFlags</span>=<span class="string">"right"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyLabel</span>=<span class="string">"\#\@"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">Row</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Row</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Key</span></span></div><div class="line"><span class="tag">            <span class="attr">android:codes</span>=<span class="string">"-1"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyEdgeFlags</span>=<span class="string">"left"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyLabel</span>=<span class="string">"↑"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Key</span></span></div><div class="line"><span class="tag">            <span class="attr">android:codes</span>=<span class="string">"122"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyLabel</span>=<span class="string">"z"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Key</span></span></div><div class="line"><span class="tag">            <span class="attr">android:codes</span>=<span class="string">"120"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyLabel</span>=<span class="string">"x"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Key</span></span></div><div class="line"><span class="tag">            <span class="attr">android:codes</span>=<span class="string">"99"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyLabel</span>=<span class="string">"c"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Key</span></span></div><div class="line"><span class="tag">            <span class="attr">android:codes</span>=<span class="string">"118"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyLabel</span>=<span class="string">"v"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Key</span></span></div><div class="line"><span class="tag">            <span class="attr">android:codes</span>=<span class="string">"98"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyLabel</span>=<span class="string">"b"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Key</span></span></div><div class="line"><span class="tag">            <span class="attr">android:codes</span>=<span class="string">"110"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyLabel</span>=<span class="string">"n"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Key</span></span></div><div class="line"><span class="tag">            <span class="attr">android:codes</span>=<span class="string">"109"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyLabel</span>=<span class="string">"m"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Key</span></span></div><div class="line"><span class="tag">            <span class="attr">android:codes</span>=<span class="string">"46"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyLabel</span>=<span class="string">"."</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Key</span></span></div><div class="line"><span class="tag">            <span class="attr">android:codes</span>=<span class="string">"63,33,58"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyEdgeFlags</span>=<span class="string">"right"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyLabel</span>=<span class="string">"\?!:"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">Row</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Row</span> <span class="attr">android:rowEdgeFlags</span>=<span class="string">"bottom"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Key</span></span></div><div class="line"><span class="tag">            <span class="attr">android:codes</span>=<span class="string">"44"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyEdgeFlags</span>=<span class="string">"left"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyLabel</span>=<span class="string">","</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyWidth</span>=<span class="string">"10%p"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Key</span></span></div><div class="line"><span class="tag">            <span class="attr">android:codes</span>=<span class="string">"47"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyLabel</span>=<span class="string">"/"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyWidth</span>=<span class="string">"10%p"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Key</span></span></div><div class="line"><span class="tag">            <span class="attr">android:codes</span>=<span class="string">"32"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:isRepeatable</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyLabel</span>=<span class="string">"SPACE"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyWidth</span>=<span class="string">"40%p"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Key</span></span></div><div class="line"><span class="tag">            <span class="attr">android:codes</span>=<span class="string">"-5"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:isRepeatable</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyLabel</span>=<span class="string">"Del"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyWidth</span>=<span class="string">"20%p"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Key</span></span></div><div class="line"><span class="tag">            <span class="attr">android:codes</span>=<span class="string">"-4"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyEdgeFlags</span>=<span class="string">"right"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyLabel</span>=<span class="string">"Done"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:keyWidth</span>=<span class="string">"20%p"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">Row</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Keyboard</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="创建Service类"><a href="#创建Service类" class="headerlink" title="创建Service类"></a>创建Service类</h2><p>创建一个java类，命名为<code>SimpleIME.java</code>（与AndroidManifest.xml文件中的定义向对应）：</p>
<ul>
<li><code>SimpleIME</code>类应该继承至<code>InputMethodService</code>类。</li>
<li><code>SimpleIME</code>类应该实现<code>OnKeyboardActionListener</code>接口，该接口包含了键盘被点击或者被按下时回调的一些函数。</li>
</ul>
<p>创建完成之后，将以下内容添加到该文件中：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> tk.xiamo.notes.simplekeyboard;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.inputmethodservice.InputMethodService;</div><div class="line"><span class="keyword">import</span> android.inputmethodservice.Keyboard;</div><div class="line"><span class="keyword">import</span> android.inputmethodservice.KeyboardView;</div><div class="line"><span class="keyword">import</span> android.media.AudioManager;</div><div class="line"><span class="keyword">import</span> android.view.KeyEvent;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.view.inputmethod.InputConnection;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleIME</span> <span class="keyword">extends</span> <span class="title">InputMethodService</span> <span class="keyword">implements</span> <span class="title">KeyboardView</span>.<span class="title">OnKeyboardActionListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> KeyboardView keyboardView;</div><div class="line">    <span class="keyword">private</span> Keyboard keyboard;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> caps = <span class="keyword">false</span>;<span class="comment">//大小写转换</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * onKey方法用于处理键盘与其他应用程序输入域进行交互。</span></div><div class="line"><span class="comment">     * getCurrentInputConnection 这个方法被用于获取其它应用程序的输入域，一旦我们获取到这个Connection对象，我们就可以使用以下方法了：</span></div><div class="line"><span class="comment">     * commitText ：输出一个或者多个字符到输入域中。</span></div><div class="line"><span class="comment">     * deleteSurroundingText ：从输入域中删除一个或者多个字符。</span></div><div class="line"><span class="comment">     * sendKeyEvent ：发送一个事件（如KEYCODE_ENTER）到外部的应用程序。</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onKey</span><span class="params">(<span class="keyword">int</span> primaryCode, <span class="keyword">int</span>[] keyCodes)</span> </span>&#123;</div><div class="line">        InputConnection inputConnection = getCurrentInputConnection();</div><div class="line">        playClick(primaryCode);</div><div class="line">        <span class="keyword">switch</span> (primaryCode) &#123;</div><div class="line">            <span class="keyword">case</span> Keyboard.KEYCODE_DELETE:</div><div class="line">                inputConnection.deleteSurroundingText(<span class="number">1</span>, <span class="number">0</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> Keyboard.KEYCODE_SHIFT:</div><div class="line">                caps = !caps;</div><div class="line">                keyboardView.setShifted(caps);</div><div class="line">                keyboardView.invalidateAllKeys();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> Keyboard.KEYCODE_DONE:</div><div class="line">                inputConnection.sendKeyEvent(<span class="keyword">new</span> KeyEvent(KeyEvent.ACTION_DOWN, KeyEvent.KEYCODE_ENTER));</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">char</span> code = (<span class="keyword">char</span>) primaryCode;</div><div class="line">                <span class="keyword">if</span> (Character.isLetter(code) &amp;&amp; caps) &#123;</div><div class="line">                    code = Character.toUpperCase(code);</div><div class="line">                &#125;</div><div class="line">                inputConnection.commitText(String.valueOf(code), <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 当键盘被创建的时候，onCreateInputView方法将会被自动调用。所有的Service成员变量可以在该方法中被初始化。</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateInputView</span><span class="params">()</span> </span>&#123;</div><div class="line">        keyboardView = (KeyboardView) getLayoutInflater().inflate(R.layout.keyboard, <span class="keyword">null</span>);</div><div class="line">        keyboard = <span class="keyword">new</span> Keyboard(<span class="keyword">this</span>, R.xml.qwerty);</div><div class="line">        keyboardView.setKeyboard(keyboard);</div><div class="line">        keyboardView.setOnKeyboardActionListener(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">return</span> keyboardView;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> keyCode 按键的键码</span></div><div class="line"><span class="comment">     *                对指定的按键播放不同的按键声音</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">playClick</span><span class="params">(<span class="keyword">int</span> keyCode)</span> </span>&#123;</div><div class="line">        AudioManager am = (AudioManager) getSystemService(AUDIO_SERVICE);</div><div class="line">        <span class="keyword">switch</span> (keyCode) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="number">32</span>:</div><div class="line">                am.playSoundEffect(AudioManager.FX_KEYPRESS_SPACEBAR);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> Keyboard.KEYCODE_DONE:</div><div class="line">            <span class="keyword">case</span> <span class="number">10</span>:</div><div class="line">                am.playSoundEffect(AudioManager.FX_KEYPRESS_RETURN);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> Keyboard.KEYCODE_DELETE:</div><div class="line">                am.playSoundEffect(AudioManager.FX_KEYPRESS_DELETE);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                am.playSoundEffect(AudioManager.FX_KEYPRESS_STANDARD);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onText</span><span class="params">(CharSequence text)</span> </span>&#123;&#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swipeLeft</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swipeRight</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swipeDown</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swipeUp</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPress</span><span class="params">(<span class="keyword">int</span> primaryCode)</span> </span>&#123;&#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRelease</span><span class="params">(<span class="keyword">int</span> primaryCode)</span> </span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>需要特别说明的是：一旦用户在键盘上按下了一个按键，onKey方法将会带着被按下的按键的所代表的键值参数而被调用，基于键值的不同，将会执行以下动作：</strong></p>
<table>
<thead>
<tr>
<th>键值</th>
<th>指定的动作</th>
</tr>
</thead>
<tbody>
<tr>
<td>KEYCODE_DELETE</td>
<td>将会使用deleteSurroundingText 方法删除光标左侧的一个字符。</td>
</tr>
<tr>
<td>KEYCODE_DONE</td>
<td>将会激发一个KEYCODE_ENTER 事件。</td>
</tr>
<tr>
<td>KEYCODE_SHIFT</td>
<td>caps变量的值将会被改变并且通过setShifted方法更新键盘的状态。整个键盘都会被重新绘制来保证状态改变之后按键的label标签可以被更新。其中：invalidateAllKeys 方法将可以重绘所有按键。</td>
</tr>
<tr>
<td>普通键值</td>
<td>将会被简单的转换为一个字符然后发送到文本输入域中，如果caps变量被设置为true，那么按键字符都将被转换为大写。</td>
</tr>
</tbody>
</table>
<h2 id="编译运行"><a href="#编译运行" class="headerlink" title="编译运行"></a>编译运行</h2><p>编译运行，在手机上运行的效果如下图：</p>
<p><img src="http://i1.piimg.com/e15673195304af50.jpg" alt="" title="键盘运行效果"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;由于最近做的一个Android项目需要用到用户的输入一些字符，常规的输入法输入非常的不方便。因此有必要自定义一个输入法来完成这个过程。此处给出一个简单的输入法Demo&lt;br&gt;来帮助理解自定义输入法的一些实现过程。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;有关输入法的一些说明，请参见:&lt;a href=&quot;http://notes.xiamo.tk/2015-04-01-Create-an-Android-IME.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Create a Android IME&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android" scheme="https://notes.wanghao.work/categories/Android/"/>
    
    
      <category term="Android" scheme="https://notes.wanghao.work/tags/Android/"/>
    
      <category term="IME" scheme="https://notes.wanghao.work/tags/IME/"/>
    
  </entry>
  
  <entry>
    <title>部署PPTP and OpenConnect VPN</title>
    <link href="https://notes.wanghao.work/2015-08-28-%E5%90%8C%E6%97%B6%E9%83%A8%E7%BD%B2PPTP-Server-and-OpenConnect-Server.html"/>
    <id>https://notes.wanghao.work/2015-08-28-同时部署PPTP-Server-and-OpenConnect-Server.html</id>
    <published>2015-08-28T15:17:55.000Z</published>
    <updated>2017-06-14T15:29:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于几天之前<a href="https://github.com/clowwindy" target="_blank" rel="external">@clowwindy</a>被某部门请喝茶，导致现Github上Shadowsocks项目源码被迫全部清除。非常感谢clowwindy所做的一切，希望他一切安好。</p>
<p>虽然目前Shadowsocks还能正常使用，但是由于项目不在更新维护，还是要准备Shadowsocks的替代工具，以备不时之需，毕竟经常要上Google以及stackoverflow以及时不时看看YouTube。</p>
<h2 id="PPTP-Server"><a href="#PPTP-Server" class="headerlink" title="PPTP Server"></a>PPTP Server</h2><p>如果对速度要求较高，又不那么在乎连接的安全性的话，PPTP VPN 是一个不错的选择，有着兼容性较好,速度快配置简单的优点。当然也有着加密强度不够，连接强度、抗干扰能力弱等缺点，但是基本上够用咯~</p>
<a id="more"></a>
<h3 id="配置方法"><a href="#配置方法" class="headerlink" title="配置方法"></a>配置方法</h3><p>如何配置PPTP VPN服务器，博主写了一个简单的脚本来自动一键配置PPTP，脚本地址：<a href="https://github.com/smilexiamo/AutoProxyScript" target="_blank" rel="external">https://github.com/smilexiamo/AutoProxyScript</a></p>
<p>具体用法此处就不再赘述，运行脚本等着配置完成即可使用。</p>
<p><strong>需要注意的是该脚本运行环境为Debian或者Ubuntu。不适用于CentOS之类的Red Hat系Linux。</strong></p>
<h3 id="添加PPTP用户"><a href="#添加PPTP用户" class="headerlink" title="添加PPTP用户"></a>添加PPTP用户</h3><p>编辑<code>/etc/ppp/chap-secrets</code>文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/ppp/chap-secrets</div></pre></td></tr></table></figure></p>
<p>按照如下格式添加用户，每行一个即可：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Secrets for authentication using CHAP</span></div><div class="line"><span class="comment"># client    server       secret       IP addresses</span></div><div class="line">  vpn_user01  pptpd    vpn_password01     *</div><div class="line">  vpn_user02  pptpd    vpn_password02     *</div></pre></td></tr></table></figure></p>
<h2 id="OpenConnect-Server"><a href="#OpenConnect-Server" class="headerlink" title="OpenConnect Server"></a>OpenConnect Server</h2><p>对于某一些安全性要求比较高的场合，PPTP可能就不那么适合了，这个时候就可以使用OpenConnect VPN了。它通过实现Cisco的AnyConnect协议，用DTLS作为主要的加密传输协议。其主要的有点有：</p>
<ul>
<li>AnyConnect的VPN协议默认使用UDP DTLS作为数据传输，但如果有什么网络问题导致UDP传输出现问题，它会利用最初建立的TCP TLS通道作为备份通道，降低VPN断开的概率。</li>
<li>AnyConnect作为Cisco新一代的VPN解决方案，被用于许多大型企业，这些企业依赖它提供正常的商业运作。</li>
<li>OpenConnet的架设足够麻烦，如果你不是大型企业，你会用AnyConnect的概率无限趋近于零。</li>
<li>支持自定义路由表，因此是Shadowsocks比较好的替代方案。</li>
</ul>
<p>当然啦，有这么多有点，那么缺点也比较明显了：配置麻烦复杂。</p>
<h3 id="配置方法-1"><a href="#配置方法-1" class="headerlink" title="配置方法"></a>配置方法</h3><p>有关如何配置的问题，这里有一个博主测试可用的还算比较干净的脚本，大大简化了配置的流程：<a href="https://github.com/fanyueciyuan/eazy-for-ss/tree/master/ocservauto" target="_blank" rel="external">https://github.com/fanyueciyuan/eazy-for-ss/tree/master/ocservauto</a></p>
<p>先运行博主的脚本，配置好PPTP，在运行此脚本配置好OpenConnect Server。博主测试这两种服务器是可以同时运行的。</p>
<h3 id="连接方法"><a href="#连接方法" class="headerlink" title="连接方法"></a>连接方法</h3><p>虽然OpenConnect Server兼容Cisco的Anyconnect，但是博主在<a href="https://software.cisco.com/download/navigator.html?mdfid=278875403&amp;flowid=17001" target="_blank" rel="external">windows</a>以及<a href="https://play.google.com/store/apps/details?id=com.cisco.anyconnect.vpn.android.avf" target="_blank" rel="external">Android平台</a>使用Cisco官方的客户端均出现可以连接但是无法访问网络的问题。改用OpenConnect Server官方推荐的客户端就正常了。以下给出OpenConnect Server官方客户端链接：</p>
<ul>
<li><a href="https://github.com/openconnect/openconnect-gui/releases" target="_blank" rel="external">Windows OpenConnect-GUI</a></li>
<li><a href="https://github.com/openconnect/openconnect-gui/wiki/MacOSX" target="_blank" rel="external">MacOSX OpenConnect-GUI</a></li>
<li><a href="https://play.google.com/store/apps/details?id=app.openconnect" target="_blank" rel="external">Android OpenConnect-GUI</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于几天之前&lt;a href=&quot;https://github.com/clowwindy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@clowwindy&lt;/a&gt;被某部门请喝茶，导致现Github上Shadowsocks项目源码被迫全部清除。非常感谢clowwindy所做的一切，希望他一切安好。&lt;/p&gt;
&lt;p&gt;虽然目前Shadowsocks还能正常使用，但是由于项目不在更新维护，还是要准备Shadowsocks的替代工具，以备不时之需，毕竟经常要上Google以及stackoverflow以及时不时看看YouTube。&lt;/p&gt;
&lt;h2 id=&quot;PPTP-Server&quot;&gt;&lt;a href=&quot;#PPTP-Server&quot; class=&quot;headerlink&quot; title=&quot;PPTP Server&quot;&gt;&lt;/a&gt;PPTP Server&lt;/h2&gt;&lt;p&gt;如果对速度要求较高，又不那么在乎连接的安全性的话，PPTP VPN 是一个不错的选择，有着兼容性较好,速度快配置简单的优点。当然也有着加密强度不够，连接强度、抗干扰能力弱等缺点，但是基本上够用咯~&lt;/p&gt;
    
    </summary>
    
      <category term="折腾" scheme="https://notes.wanghao.work/categories/%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="Proxy" scheme="https://notes.wanghao.work/tags/Proxy/"/>
    
  </entry>
  
  <entry>
    <title>MySQL开启远程访问授权</title>
    <link href="https://notes.wanghao.work/2015-08-20-MySQL%E5%BC%80%E5%90%AF%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90.html"/>
    <id>https://notes.wanghao.work/2015-08-20-MySQL开启远程访问权限.html</id>
    <published>2015-08-20T09:39:55.000Z</published>
    <updated>2016-11-06T01:31:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>在做开发测试的时候，经常会用到MySQL数据库。测试使用的数据库不在本机上而在虚拟机里，访问数据库就比较蛋碎了。因为MySQL数据库默认是没有开放远程访问授权的。不能够直接访问，下面介绍两种常用的开启MySQL远程访问权限开启方法:</p>
<h3 id="方法一：修改user表开启远程访问"><a href="#方法一：修改user表开启远程访问" class="headerlink" title="方法一：修改user表开启远程访问"></a>方法一：修改<code>user</code>表开启远程访问</h3><p>在终端中键入以下命令登录MySQL数据库:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -uROOT -pPASSWORD</div></pre></td></tr></table></figure>
<p>其中，<font color="red"><code>ROOT</code></font>表示登录的用户名，<font color="red"><code>PASSWORD</code></font>表示登录的该用户的密码。登录成功之后，访问<code>mysql</code>数据库，依次执行以下SQL语句:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt;  use mysql;</div><div class="line">mysql&gt;  select host,user from user;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>将会打印出MySQL数据库中所有用户以及其授权访问地址，以博主的为测试数据库为例，打印信息如下:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">+-------------------------+------------------+</div><div class="line">| host                    | user             |</div><div class="line">+-------------------------+------------------+</div><div class="line">| 127.0.0.1               | root             |</div><div class="line">| ::1                     | root             |</div><div class="line">| localhost               | debian-sys-maint |</div><div class="line">| localhost               | root             |</div><div class="line">| xiamo-virtual-machine   | root             |</div><div class="line">+-------------------------+------------------+</div><div class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</div></pre></td></tr></table></figure>
<p>可以看到，<font color="red"><code>host</code></font>栏表示登录主机，可以是ip地址或者主机名，不难发现其实他们都是虚拟机本地地址，因此我们是没办法从物理机访问该数据库的。因此，我们只需要更改登录主机的<font color="red"><code>host</code></font>栏目里的地址，便可以在远程主机上访问了。</p>
<p>比如博主通过<code>桥接模式</code>与虚拟机相连接，物理机的ip地址为<code>192.168.1.101</code>,虚拟机的ip地址为<code>192.168.1.103</code>，我们可以执行以下SQL语句来达到远程访问MySQL:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt;  use mysql;</div><div class="line">mysql&gt;  update user <span class="built_in">set</span> host=<span class="string">'192.168.1.101'</span> <span class="built_in">where</span> user=<span class="string">'root'</span> and host=<span class="string">'127.0.0.1'</span>;</div></pre></td></tr></table></figure>
<p>然后再执行以下命令重启MySQL即可通过物理机访问MySQL啦:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service mysql restart</div></pre></td></tr></table></figure></p>
<p>也可以执行以下SQL语句刷新授权信息来达到不重启MySQL即可远程访问:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt;  FLUSH PRIVILEGES;</div></pre></td></tr></table></figure></p>
<p>当然，在大多数时候，我们都希望可以从任意ip地址访问，而不是仅限于指定的ip，这样就算ip地址变动也不会再次折腾，这个时候我们可以执行以下SQL:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt;  use mysql;</div><div class="line">mysql&gt;  update user <span class="built_in">set</span> host=<span class="string">'%'</span> <span class="built_in">where</span> user=<span class="string">'root'</span> and host=<span class="string">'127.0.0.1'</span>;</div></pre></td></tr></table></figure>
<p>这样，将<font color="red"><code>host</code></font>值改为<font color="red"><code>%</code></font>,就可以在任意主机登录到MySQL咯。</p>
<h3 id="方法二：通过授权语句开启远程访问"><a href="#方法二：通过授权语句开启远程访问" class="headerlink" title="方法二：通过授权语句开启远程访问"></a>方法二：通过授权语句开启远程访问</h3><p>与修改user表的方法相同，在终端中连接到MySQL数据库。然后执行以下SQL语句即可授权指定用户远程访问MySQL:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt;  grant all privileges  on *.* to USERNAME@<span class="string">'%'</span> identified by <span class="string">"PASSWORD"</span>;</div><div class="line">mysql&gt;  FLUSH PRIVILEGES;</div></pre></td></tr></table></figure></p>
<p>需要注意的是，其中<code>*.*</code>的含义为：</p>
<ul>
<li>第一个<font color="red"><code>*</code></font>为MySQL中的数据库名。</li>
<li>第二个<font color="red"><code>*</code></font>为MySQL中的指定的数据库的表名。</li>
<li><font color="red"><code>USERNAME</code></font>为授权用户的用户名。</li>
<li><font color="red"><code>%</code></font>为任意主机，也可以写指定的ip地址或者主机名。</li>
<li><font color="red"><code>PASSWORD</code></font>为授权改用户在指定的数据访问MySQL时的密码，<strong>如果该密码和本地用户同名用户的密码不一致，远程访问时务必使用该授权密码</strong>。</li>
</ul>
<h3 id="解决Linux下，MySQL中文乱码问题"><a href="#解决Linux下，MySQL中文乱码问题" class="headerlink" title="解决Linux下，MySQL中文乱码问题"></a>解决Linux下，MySQL中文乱码问题</h3><p>首先，当然是确保表或者创建的数据库的编码方式为<code>UTF-8</code>啦，在这些都没问题的情况下，执行以下SQL语句，查看MySQL的编码情况：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt;  show variables like <span class="string">'character%'</span>;</div></pre></td></tr></table></figure></p>
<p>一般情况下，将会得到以下结果:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">+--------------------------+----------------------------+</div><div class="line">| Variable_name            | Value                      |</div><div class="line">+--------------------------+----------------------------+</div><div class="line">| character_set_client     | utf8                       |</div><div class="line">| character_set_connection | utf8                       |</div><div class="line">| character_set_database   | latin1                     |</div><div class="line">| character_set_filesystem | binary                     |</div><div class="line">| character_set_results    | utf8                       |</div><div class="line">| character_set_server     | latin1                     |</div><div class="line">| character_set_system     | utf8                       |</div><div class="line">| character_sets_dir       | /usr/share/mysql/charsets/ |</div><div class="line">+--------------------------+----------------------------+</div><div class="line">8 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>此时，我们修改位于<font color="red"><code>/etc/mysql/my.cnf</code></font>的<font color="red"><code>my.cnf</code></font>文件:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/mysql/my.cnf</div></pre></td></tr></table></figure></p>
<p>在<font color="red"><code>[client]</code></font>中加入:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">default-character-set=utf8</div></pre></td></tr></table></figure></p>
<p>在<font color="red"><code>[mysqld]</code></font>中加入:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">character-set-server=utf8</div></pre></td></tr></table></figure></p>
<p>退出保存之后重启MySQL，再次执行，得到如下结果:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">mysql&gt;  show variables like <span class="string">'character%'</span>;</div><div class="line">+--------------------------+----------------------------+</div><div class="line">| Variable_name            | Value                      |</div><div class="line">+--------------------------+----------------------------+</div><div class="line">| character_set_client     | utf8                       |</div><div class="line">| character_set_connection | utf8                       |</div><div class="line">| character_set_database   | utf8                       |</div><div class="line">| character_set_filesystem | binary                     |</div><div class="line">| character_set_results    | utf8                       |</div><div class="line">| character_set_server     | utf8                       |</div><div class="line">| character_set_system     | utf8                       |</div><div class="line">| character_sets_dir       | /usr/share/mysql/charsets/ |</div><div class="line">+--------------------------+----------------------------+</div><div class="line">8 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>即可看到编码都为UTF-8啦~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在做开发测试的时候，经常会用到MySQL数据库。测试使用的数据库不在本机上而在虚拟机里，访问数据库就比较蛋碎了。因为MySQL数据库默认是没有开放远程访问授权的。不能够直接访问，下面介绍两种常用的开启MySQL远程访问权限开启方法:&lt;/p&gt;
&lt;h3 id=&quot;方法一：修改user表开启远程访问&quot;&gt;&lt;a href=&quot;#方法一：修改user表开启远程访问&quot; class=&quot;headerlink&quot; title=&quot;方法一：修改user表开启远程访问&quot;&gt;&lt;/a&gt;方法一：修改&lt;code&gt;user&lt;/code&gt;表开启远程访问&lt;/h3&gt;&lt;p&gt;在终端中键入以下命令登录MySQL数据库:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;mysql -uROOT -pPASSWORD&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中，&lt;font color=&quot;red&quot;&gt;&lt;code&gt;ROOT&lt;/code&gt;&lt;/font&gt;表示登录的用户名，&lt;font color=&quot;red&quot;&gt;&lt;code&gt;PASSWORD&lt;/code&gt;&lt;/font&gt;表示登录的该用户的密码。登录成功之后，访问&lt;code&gt;mysql&lt;/code&gt;数据库，依次执行以下SQL语句:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;mysql&amp;gt;  use mysql;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mysql&amp;gt;  select host,user from user;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://notes.wanghao.work/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="https://notes.wanghao.work/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>开启NexT主题多说主动评论邮件通知</title>
    <link href="https://notes.wanghao.work/2015-07-25-%E5%A4%9A%E8%AF%B4%E4%B8%BB%E5%8A%A8%E9%82%AE%E4%BB%B6%E6%8F%90%E9%86%92.html"/>
    <id>https://notes.wanghao.work/2015-07-25-多说主动邮件提醒.html</id>
    <published>2015-07-25T04:00:22.000Z</published>
    <updated>2016-11-06T01:31:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>经过一段时间的折腾多说，博主发现原来多说是不支持主动评论提醒的。也就是说如果在一篇博客中有人主动评论留言的话，多说是不会邮件通知的。除非他回复了你，那么多说才会邮件通知。（怪不得博主觉得一会儿有邮件提醒一会儿没有咋个这么奇怪。。）</p>
<hr>
<p>去多说的官方一番折腾，找到了官方文档，有说到使用<code>data-author-key</code>可以设置主动邮件提醒,以下给出多说官网说明的传送门：</p>
<ul>
<li><strong><a href="http://dev.duoshuo.com/docs/51435552047fe92f490225de" target="_blank" rel="external">同步用户到多说</a></strong></li>
<li><strong><a href="http://dev.duoshuo.com/docs/5003ecd94cab3e7250000008/" target="_blank" rel="external">评论框调用代码参数说明</a></strong></li>
</ul>
<a id="more"></a>
<p>通过上面的链接查看多说的API说明，不难看要想实现评论主动邮件通知，只需要:</p>
<ul>
<li>自定义同步一个用户到多说的服务器。</li>
<li>将这个同步的用户在站点中的身份设置为作者。</li>
<li>取得自定义用户在站点中的ID。</li>
<li>将这个ID作为<code>data-author-key</code>的值加在站点的多说评论框中即可。</li>
</ul>
<p>实现上述操作之后，当其他用户评论带有<code>data-author-key</code>标示的文章时，多说服务器会默认为在向我们自定义的作者用户评论，便会向我们自定义用户的邮箱发送邮件提醒啦~</p>
<hr>
<p>分析了原理之后，我们具体应该怎么做呢？</p>
<p>很简单，只需要向多说提供的同步用户接口发个POST就行了。语言不限，不过既然我们用的是Hexo，那就以NodeJS为例吧：</p>
<ul>
<li><strong>随便在哪个地方新建一个文件夹</strong>（就是这么随意~）</li>
<li><strong>进入该文件夹，执行以下命令:</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev request</div></pre></td></tr></table></figure>
<ul>
<li><strong>新建一个<code>adduser.js</code>文件，将下面的代码粘贴进去，并修改<code>data</code>中的数据: </strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'request'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> data = &#123;</div><div class="line">  <span class="string">'short_name'</span>         : <span class="string">''</span>,     <span class="comment">// 你的short_name，后台管理那里可以看到</span></div><div class="line">  <span class="string">'secret'</span>             : <span class="string">''</span>,     <span class="comment">// 密钥，后台管理那里可以看到</span></div><div class="line">  <span class="string">'users[0][user_key]'</span> : <span class="string">'1'</span>,    <span class="comment">// 用户在站点的ID，就是后面需要设置的 data-author-key值，可以随意设置，这里默认为1吧</span></div><div class="line">  <span class="string">'users[0][name]'</span>     : <span class="string">''</span>,     <span class="comment">// 显示的名字</span></div><div class="line">  <span class="string">'users[0][email]'</span>    : <span class="string">''</span>,     <span class="comment">// 提醒的邮箱</span></div><div class="line">  <span class="string">'users[0][role]'</span>     : <span class="string">'author'</span><span class="comment">// 用户的类型，设置为作者</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">http.post(&#123;<span class="attr">url</span>:<span class="string">'http://api.duoshuo.com/users/import.json'</span>, <span class="attr">form</span>: data&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error, response, body</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!error &amp;&amp; response.statusCode == <span class="number">200</span>) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Post data to Duoshuo success'</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Post data to Duoshuo fail'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>将上面的代码中data中的数据按照自己的多说账户设置好之后，执行以下命令完成数据同步到多说服务器:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node adduser.js</div></pre></td></tr></table></figure></p>
<ul>
<li>如果输出为<code>Post data to Duoshuo fail</code>,那么检察一下data数据是否修改正确，或者直接给我留言排查问题。</li>
<li>如果输出为<code>Post data to Duoshuo success</code>,那么就可以登录到多说的后台，在用户那里看到新添加的用户了，类似这样:<br><img src="http://7xkj6q.com1.z0.glb.clouddn.com/blog/image/jpg/1137805359113768cao.jpg" alt="" title="多说用户界面"></li>
</ul>
<p>如果角色不是作者的话，手动更改为作者。然后我们找到<code>NexT</code>主题的<code>layout/_layout.swig</code>文件，打开并找到这段代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;% <span class="keyword">if</span> page.comments %&#125;</div><div class="line">             &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"comments"</span> id=<span class="string">"comments"</span>&gt;</div><div class="line">               &#123;% <span class="keyword">if</span> (config.duoshuo and config.duoshuo.shortname) or config.duoshuo_shortname %&#125;</div><div class="line">                 &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"ds-thread"</span> data-thread-key=<span class="string">"&#123;&#123; page.path &#125;&#125;"</span></div><div class="line">                      data-title=<span class="string">"&#123;&#123; page.title &#125;&#125;"</span> data-url=<span class="string">"&#123;&#123; page.permalink &#125;&#125;"</span>&gt;</div><div class="line">                 &lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure>
<p>将其修改为:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;% <span class="keyword">if</span> page.comments %&#125;</div><div class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"comments"</span> id=<span class="string">"comments"</span>&gt;</div><div class="line">    &#123;% <span class="keyword">if</span> (config.duoshuo and config.duoshuo.shortname) or config.duoshuo_shortname %&#125;</div><div class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"ds-thread"</span> data-thread-key=<span class="string">"&#123;&#123; page.path &#125;&#125;"</span></div><div class="line">           data-title=<span class="string">"&#123;&#123; page.title &#125;&#125;"</span> data-url=<span class="string">"&#123;&#123; page.permalink &#125;&#125;"</span> data-author-key=<span class="string">"&#123;&#123; theme.duoshuo_info.data_author_key &#125;&#125;"</span>&gt;</div><div class="line">      &lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure></p>
<p>然后在主题的配置文件<code>_config.yml</code>文件中增加以下一行配置:<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">duoshuo_info:</span></div><div class="line"><span class="attr">  data_author_key:</span> <span class="number">1</span> <span class="comment">#此处填写上面js脚本中的data变量中的users[0][user_key]的值，因为上面为1，这里我就填写为1了。</span></div></pre></td></tr></table></figure></p>
<p>当然你可以也可直接写死为1，像这个样子:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;% <span class="keyword">if</span> page.comments %&#125;</div><div class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"comments"</span> id=<span class="string">"comments"</span>&gt;</div><div class="line">    &#123;% <span class="keyword">if</span> (config.duoshuo and config.duoshuo.shortname) or config.duoshuo_shortname %&#125;</div><div class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"ds-thread"</span> data-thread-key=<span class="string">"&#123;&#123; page.path &#125;&#125;"</span></div><div class="line">           data-title=<span class="string">"&#123;&#123; page.title &#125;&#125;"</span> data-url=<span class="string">"&#123;&#123; page.permalink &#125;&#125;"</span> data-author-key=<span class="string">"1"</span>&gt;</div><div class="line">      &lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure></p>
<p>然后重新博客文件并发布，这样在就可以当其他人评论你的博客的时候主动发邮件通知啦~像这个样子的:</p>
<p><img src="http://7xkj6q.com1.z0.glb.clouddn.com/blog/image/jpg/1137805358f327217do.jpg" alt="" title="多说主动提醒示例"></p>
<p>像这样子，就让我们的<code>NexT</code>支持多说主动评论邮件通知啦，感谢<a href="http://www.arao.me/" target="_blank" rel="external">@arao</a>的友情出镜~</p>
<p><strong>PS:这种邮件提醒不是实时提醒，而是每天一封汇总邮件。如果你中途查看了这个评论的话，也是不会邮件提醒的~</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经过一段时间的折腾多说，博主发现原来多说是不支持主动评论提醒的。也就是说如果在一篇博客中有人主动评论留言的话，多说是不会邮件通知的。除非他回复了你，那么多说才会邮件通知。（怪不得博主觉得一会儿有邮件提醒一会儿没有咋个这么奇怪。。）&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;去多说的官方一番折腾，找到了官方文档，有说到使用&lt;code&gt;data-author-key&lt;/code&gt;可以设置主动邮件提醒,以下给出多说官网说明的传送门：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://dev.duoshuo.com/docs/51435552047fe92f490225de&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;同步用户到多说&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://dev.duoshuo.com/docs/5003ecd94cab3e7250000008/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;评论框调用代码参数说明&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://notes.wanghao.work/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://notes.wanghao.work/tags/Hexo/"/>
    
      <category term="多说" scheme="https://notes.wanghao.work/tags/%E5%A4%9A%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>基于Debian Linux搭建Git服务器</title>
    <link href="https://notes.wanghao.work/2015-07-18-%E5%9F%BA%E4%BA%8EDebian-Linux%E6%90%AD%E5%BB%BAGit%E6%9C%8D%E5%8A%A1%E5%99%A8.html"/>
    <id>https://notes.wanghao.work/2015-07-18-基于Debian-Linux搭建Git服务器.html</id>
    <published>2015-07-18T09:47:37.000Z</published>
    <updated>2017-06-14T15:36:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp;&ensp;&ensp;&ensp;因为一些众所周知的原因，某些项目不适合开源（代码写的烂我会乱说？(╯﹏╰)b ）。又因为博主不是壕，买不起Github的私有空间，所以只能利用手头上的Debian服务器搭建Git服务器咯~</p>
<hr>
<h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>    要搭建Git服务器，第一步当然是要安装Git了，键入以下命令来完成Git的安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install git</div></pre></td></tr></table></figure>
<h3 id="新建Git用户"><a href="#新建Git用户" class="headerlink" title="新建Git用户"></a>新建Git用户</h3><p>&ensp;&ensp;&ensp;&ensp;出于安全的原因考虑，我们肯定是不会使用<code>root</code>或者其它具有完整的shell执行权限的用户来运行Git的。因此，我们需要创建一个<code>git</code>用户来运行<code>git</code>服务。</p>
<p>键入以下命令来完成<code>git</code>用户的创建：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo adduser git</div></pre></td></tr></table></figure>
<p>创建用户的途中会要求输入用户密码，这个密码请务必记住，这个密码的作用我们后面再说。<code>git</code>用户的其它配置使用默认值直接回车就行。</p>
<h3 id="禁用shell登录"><a href="#禁用shell登录" class="headerlink" title="禁用shell登录"></a>禁用shell登录</h3><p><code>git</code>用户创建完成之后，系统默认是为其分配的<code>bash</code>的，我们不希望<code>git</code>用户拥有shell执行权限，因此我们需要更改<code>git</code>用户的默认shell，使其不允许登录shell。</p>
<p>我们可以通过编辑<font color="red"><code>/etc/passwd</code></font>文件来完成对<code>git</code>用户shell的更改。</p>
<p>键入以下命令编辑<font color="red"><code>/etc/passwd</code></font>文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/passwd</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>找到类似下面的一行（一般在文件的末尾）：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git:x:1000:1000:,,,:/home/git:/usr/bin/bash</div></pre></td></tr></table></figure>
<p>修改为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git:x:1000:1000:,,,:/home/git:/usr/bin/git-shell</div></pre></td></tr></table></figure></p>
<p>如果你不确定<font color="red"><code>git-shell</code></font>是不是在<font color="red"><code>/usr/bin/git-shell</code></font>这个位置的话，可以使用以下命令来查看<code>git-shell</code>的路径：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">which</span> git-shell</div></pre></td></tr></table></figure></p>
<p>这样，<code>git</code>用户可以正常通过<code>ssh</code>使用git，但无法登录shell，因为我们为<code>git用户</code>指定的<code>git-shell</code>每次一登录就自动退出。</p>
<h3 id="Git密钥登录"><a href="#Git密钥登录" class="headerlink" title="Git密钥登录"></a>Git密钥登录</h3><p>既然是私有Git服务器，当然必要的<code>push</code>和<code>pull</code>以及<code>clone</code>等操作不能让其他未经允许的人使用了。当然，我们也不想每次进行远程仓库操作的时候都输入<code>git</code>用户的密码。</p>
<p>因此，通过ssh密钥证书的方式就很有必要了~</p>
<ul>
<li>如同Github导入公钥一样，首先收集授权访问用户的公钥文件，也就是他们的<font color="red"><code>id_rsa.pub</code></font>文件。</li>
<li>复制<code>id_rsa.pub</code>文件其中全部的内容。</li>
<li>将<font color="red"><code>id_rsa.pub</code></font>文件其中全部的内容导入到Git服务器的<font color="red"><code>/home/git/.ssh/authorized_keys</code></font>文件中，每一行导入一个公钥文件。</li>
</ul>
<p>如果没有<font color="red"><code>/home/git/.ssh/authorized_keys</code></font>文件，请执行以下命令自行创建：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /home/git</div><div class="line">mkdir .ssh</div><div class="line"><span class="built_in">cd</span> .ssh</div><div class="line">touch authorized_keys</div></pre></td></tr></table></figure></p>
<p><strong>这样，凡是添加了公钥到<font color="red"><code>/home/git/.ssh/authorized_keys</code></font>文件的用户都能够正常的使用远程仓库的常用操作了，如果Git公钥没有被添加到<font color="red"><code>/home/git/.ssh/authorized_keys</code></font>文件中又想执行远程仓库的操作的话，那么就需要用到上面<code>git</code>用户的密码了，因为<code>git</code>会要求输入Git服务器的<code>git</code>用户的密码。这就是上面设置<code>git</code>用户密码的作用了~</strong></p>
<h3 id="初始化服务器Git仓库"><a href="#初始化服务器Git仓库" class="headerlink" title="初始化服务器Git仓库"></a>初始化服务器Git仓库</h3><p>上面的准备工作做完，就需要在Git服务器上选定一个目录作为Git仓库了。假定我们选择<font color="red"><code>/gitserver/Demo.git</code></font>作为Git仓库，那么我们首先需要执行以下命令创建<font color="red"><code>/gitserver</code></font>目录：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /</div><div class="line">mkdir gitserver</div><div class="line"><span class="built_in">cd</span> gitserver</div></pre></td></tr></table></figure>
<p>然后进入<code>gitserver</code>目录，执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo git init --bare demo.git</div></pre></td></tr></table></figure>
<p>Git就会创建一个裸仓库，裸仓库没有工作区，因为Git服务器上的Git仓库主要是为了共享，所以不让用户直接登录到Git服务器上去修改工作区。</p>
<p><strong>Git服务器上的Git仓库通常都以<font color="red"><code>.git</code></font>结尾。</strong></p>
<h3 id="修改Git仓库owner"><a href="#修改Git仓库owner" class="headerlink" title="修改Git仓库owner"></a>修改Git仓库owner</h3><p>创建好仓库之后，我们需要将仓库的owner设置为<code>git</code>用户，不让我们前面为<code>git</code>用户所做的配置就没啥意义了~</p>
<p>执行以下命令，修改仓库的owner：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chown -R git:git demo.git</div></pre></td></tr></table></figure></p>
<h3 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h3><p>现在就可以通过<code>git clone</code>命令克隆Git服务器上的<code>demo</code>仓库了，在各自的PC上执行以下命令以完成克隆：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> ssh://git@server:/gitserver/demo.git</div><div class="line">Cloning into <span class="string">'demo'</span>...</div><div class="line">warning: You appear to have cloned an empty repository.</div></pre></td></tr></table></figure>
<p>其中需要注意的是：</p>
<ul>
<li>上述命令<code>git clone ssh://git@SERVER:/gitserver/demo.git</code>中,<font color="red"><code>SERVER</code></font>的值为你的服务器的<font color="red"><code>ip地址</code></font>或者<font color="red"><code>域名</code></font>。</li>
<li>如果你的服务器更改了默认的ssh端口号，那么需要在地址中指出，像这样：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> ssh://git@server:PORT/gitserver/demo.git</div></pre></td></tr></table></figure>
<p>其中<font color="red"><code>PORT</code></font>即为更改之后的ssh端口号。</p>
<p>例如，博主对服务器做了A记录的域名解析，也更改了默认端口号为9669，那么执行的克隆地址的命令即为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> ssh://git@server.xiamo.tk:9669/gitserver/demo.git</div></pre></td></tr></table></figure></p>
<p>后面的操作不用我多说，大家也都懂的了~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;因为一些众所周知的原因，某些项目不适合开源（代码写的烂我会乱说？(╯﹏╰)b ）。又因为博主不是壕，买不起Github的私有空间，所以只能利用手头上的Debian服务器搭建Git服务器咯~&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;安装Git&quot;&gt;&lt;a href=&quot;#安装Git&quot; class=&quot;headerlink&quot; title=&quot;安装Git&quot;&gt;&lt;/a&gt;安装Git&lt;/h3&gt;&lt;p&gt;    要搭建Git服务器，第一步当然是要安装Git了，键入以下命令来完成Git的安装：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo apt-get install git&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;新建Git用户&quot;&gt;&lt;a href=&quot;#新建Git用户&quot; class=&quot;headerlink&quot; title=&quot;新建Git用户&quot;&gt;&lt;/a&gt;新建Git用户&lt;/h3&gt;&lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;出于安全的原因考虑，我们肯定是不会使用&lt;code&gt;root&lt;/code&gt;或者其它具有完整的shell执行权限的用户来运行Git的。因此，我们需要创建一个&lt;code&gt;git&lt;/code&gt;用户来运行&lt;code&gt;git&lt;/code&gt;服务。&lt;/p&gt;
&lt;p&gt;键入以下命令来完成&lt;code&gt;git&lt;/code&gt;用户的创建：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo adduser git&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;创建用户的途中会要求输入用户密码，这个密码请务必记住，这个密码的作用我们后面再说。&lt;code&gt;git&lt;/code&gt;用户的其它配置使用默认值直接回车就行。&lt;/p&gt;
&lt;h3 id=&quot;禁用shell登录&quot;&gt;&lt;a href=&quot;#禁用shell登录&quot; class=&quot;headerlink&quot; title=&quot;禁用shell登录&quot;&gt;&lt;/a&gt;禁用shell登录&lt;/h3&gt;&lt;p&gt;&lt;code&gt;git&lt;/code&gt;用户创建完成之后，系统默认是为其分配的&lt;code&gt;bash&lt;/code&gt;的，我们不希望&lt;code&gt;git&lt;/code&gt;用户拥有shell执行权限，因此我们需要更改&lt;code&gt;git&lt;/code&gt;用户的默认shell，使其不允许登录shell。&lt;/p&gt;
&lt;p&gt;我们可以通过编辑&lt;font color=&quot;red&quot;&gt;&lt;code&gt;/etc/passwd&lt;/code&gt;&lt;/font&gt;文件来完成对&lt;code&gt;git&lt;/code&gt;用户shell的更改。&lt;/p&gt;
&lt;p&gt;键入以下命令编辑&lt;font color=&quot;red&quot;&gt;&lt;code&gt;/etc/passwd&lt;/code&gt;&lt;/font&gt;文件：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;vim /etc/passwd&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://notes.wanghao.work/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://notes.wanghao.work/tags/Linux/"/>
    
      <category term="Git" scheme="https://notes.wanghao.work/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>自动备份Hexo博客源文件</title>
    <link href="https://notes.wanghao.work/2015-07-06-%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BDHexo%E5%8D%9A%E5%AE%A2%E6%BA%90%E6%96%87%E4%BB%B6.html"/>
    <id>https://notes.wanghao.work/2015-07-06-自动备份Hexo博客源文件.html</id>
    <published>2015-07-06T04:49:01.000Z</published>
    <updated>2017-06-14T15:37:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp;&ensp;用Hexo写博客是一件比较享受的事情，无奈如果换电脑的话，备份博客就是一件比较闹心的事情。</p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&ensp;&ensp;我曾经给出过通过Git备份Hexo博客源文件的方式，这种方式虽然能够备份Hexo博客的源文件，但是对于博主这种懒人，每次更新博文都需要输入两三行重复的Git命令真是一件麻烦的事情。况且指不定哪天就搞忘push到github上了。</p>
<a id="more"></a>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>前两天博主刚刚编写过关于<strong><a href="https://notes.wanghao.work/2015-06-29-Hexo%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E6%97%B6%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E7%BC%96%E8%BE%91%E5%99%A8.html">Hexo添加文章时自动打开编辑器</a></strong>的相关文章，其原理就是利用<code>NodeJS</code>的事件监听机制实现监听Hexo的<code>new</code>事件来启动编辑器，完成自动启动编辑器的操作。</p>
<p>那么可不可以通过通过监听Hexo的其它事件来完成自动执行Git命令完成自动备份呢？通过查阅<a href="https://hexo.io/zh-cn/api/events.html" target="_blank" rel="external">Hexo文档</a>，找到了Hexo的主要事件，见下表：</p>
<table>
<thead>
<tr>
<th>事件名</th>
<th>事件发生时间</th>
</tr>
</thead>
<tbody>
<tr>
<td>deployBefore</td>
<td>在部署完成前发布</td>
</tr>
<tr>
<td>deployAfter</td>
<td>在部署成功后发布</td>
</tr>
<tr>
<td>exit</td>
<td>在 Hexo 结束前发布</td>
</tr>
<tr>
<td>generateBefore</td>
<td>在静态文件生成前发布</td>
</tr>
<tr>
<td>generateAfter</td>
<td>在静态文件生成后发布</td>
</tr>
<tr>
<td>new</td>
<td>在文章文件建立后发布</td>
</tr>
</tbody>
</table>
<p>于是我们就可以通过监听Hexo的<code>deployAfter</code>事件，待上传完成之后自动运行Git备份命令，从而达到自动备份的目的。</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="将Hexo目录加入Git仓库"><a href="#将Hexo目录加入Git仓库" class="headerlink" title="将Hexo目录加入Git仓库"></a>将Hexo目录加入Git仓库</h4><p>本脚本需要<font color="red"><code>提前</code></font>将Hexo加入Git仓库并与Github或者Gitcafe远程仓库绑定之后，才能正常工作。如果你不知道怎么操作，请参考这篇博文：</p>
<ul>
<li><strong><a href="https://notes.wanghao.work/2015-04-06-%E5%A4%87%E4%BB%BDHexo%E5%8D%9A%E5%AE%A2%E6%BA%90%E6%96%87%E4%BB%B6.html">备份Hexo博客源文件</a></strong></li>
</ul>
<h4 id="安装shelljs模块"><a href="#安装shelljs模块" class="headerlink" title="安装shelljs模块"></a>安装<code>shelljs</code>模块</h4><p>要实现这个自动备份功能，需要依赖NodeJs的一个<code>shelljs</code>模块,该模块重新包装了<code>child_process</code>,调用系统命令更加的方便。（其实就是因为博主懒( ╯▽╰)）该模块需要安装后使用。</p>
<p>在命令中键入以下命令，完成<code>shelljs</code>模块的安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save shelljs</div></pre></td></tr></table></figure>
<h4 id="编写自动备份脚本"><a href="#编写自动备份脚本" class="headerlink" title="编写自动备份脚本"></a>编写自动备份脚本</h4><p>待到模块安装完成，在<code>Hexo</code>根目录的<code>scripts</code>文件夹下新建一个js文件，文件名随意取。</p>
<p><strong>如果没有<code>scripts</code>目录，请新建一个。</strong></p>
<p>然后在脚本中，写入以下内容：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>(<span class="string">'shelljs/global'</span>);</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">	hexo.on(<span class="string">'deployAfter'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">//当deploy完成后执行备份</span></div><div class="line">		run();</div><div class="line">	&#125;);</div><div class="line">&#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"产生了一个错误&lt;(￣3￣)&gt; !，错误详情为："</span> + e.toString());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> (!which(<span class="string">'git'</span>)) &#123;</div><div class="line">		echo(<span class="string">'Sorry, this script requires git'</span>);</div><div class="line">		exit(<span class="number">1</span>);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		echo(<span class="string">"======================Auto Backup Begin==========================="</span>);</div><div class="line">		cd(<span class="string">'D:/hexo'</span>);    <span class="comment">//此处修改为Hexo根目录路径</span></div><div class="line">		<span class="keyword">if</span> (exec(<span class="string">'git add --all'</span>).code !== <span class="number">0</span>) &#123;</div><div class="line">			echo(<span class="string">'Error: Git add failed'</span>);</div><div class="line">			exit(<span class="number">1</span>);</div><div class="line"></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (exec(<span class="string">'git commit -am "Form auto backup script\'s commit"'</span>).code !== <span class="number">0</span>) &#123;</div><div class="line">			echo(<span class="string">'Error: Git commit failed'</span>);</div><div class="line">			exit(<span class="number">1</span>);</div><div class="line"></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (exec(<span class="string">'git push origin master'</span>).code !== <span class="number">0</span>) &#123;</div><div class="line">			echo(<span class="string">'Error: Git push failed'</span>);</div><div class="line">			exit(<span class="number">1</span>);</div><div class="line"></div><div class="line">		&#125;</div><div class="line">		echo(<span class="string">"==================Auto Backup Complete============================"</span>)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p><strong>其中，需要修改第<font color="red"><code>17</code></font>行的<font color="red"><code>D:/hexo</code></font>路径为Hexo的根目录路径。（脚本中的路径为博主的Hexo路径）</strong></p>
</li>
<li><p><strong>如果你的Git远程仓库名称不为<font color="red"><code>origin</code></font>的话，还需要修改第<font color="red"><code>28</code></font>行执行的push命令，修改成自己的远程仓库名和相应的分支名。</strong></p>
</li>
</ul>
<p>保存脚本并退出，然后执行<code>hexo deploy</code>命令，将会得到类似以下结果:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">INFO  Deploying: git&gt;</div><div class="line">INFO  Clearing .deploy folder...</div><div class="line">INFO  Copying files from public folder...</div><div class="line">[master 3020788] Site updated: 2015-07-06 15:08:06</div><div class="line"> 5 files changed, 160 insertions(+), 58 deletions(-)</div><div class="line">Branch master <span class="built_in">set</span> up to track remote branch gh-pages from git@github.com:smilexi</div><div class="line">amo/notes.git.</div><div class="line">To git@github.com:smilexiamo/notes.git</div><div class="line">   02adbe4..3020788  master -&gt; gh-pages</div><div class="line">On branch master</div><div class="line">nothing to commit, working directory clean</div><div class="line">Branch master <span class="built_in">set</span> up to track remote branch gitcafe-pages from git@gitcafe.com:s</div><div class="line">milexiamo/smilexiamo.git.</div><div class="line">To git@gitcafe.com:smilexiamo/smilexiamo.git</div><div class="line">   02adbe4..3020788  master -&gt; gitcafe-pages</div><div class="line">INFO  Deploy <span class="keyword">done</span>: git</div><div class="line">======================Auto Backup Begin===========================</div><div class="line">[master f044360] Form auto backup script<span class="string">'s commit</span></div><div class="line"><span class="string"> 2 files changed, 35 insertions(+), 2 deletions(-)</span></div><div class="line"><span class="string"> rewrite db.json (100%)</span></div><div class="line"><span class="string">To git@github.com:smilexiamo/hexo.git</span></div><div class="line"><span class="string">   8f2b4b4..f044360  master -&gt; master</span></div><div class="line"><span class="string">==================Auto Backup Complete============================</span></div></pre></td></tr></table></figure>
<p>这样子，每次更新博文并<code>deploy</code>到服务器上之后，备份就自动启动并完成备份啦~是不是很方便呢？</p>
<p>Enjoy it！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;ensp;&amp;ensp;用Hexo写博客是一件比较享受的事情，无奈如果换电脑的话，备份博客就是一件比较闹心的事情。&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&amp;ensp;&amp;ensp;我曾经给出过通过Git备份Hexo博客源文件的方式，这种方式虽然能够备份Hexo博客的源文件，但是对于博主这种懒人，每次更新博文都需要输入两三行重复的Git命令真是一件麻烦的事情。况且指不定哪天就搞忘push到github上了。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://notes.wanghao.work/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://notes.wanghao.work/tags/Hexo/"/>
    
  </entry>
  
</feed>
